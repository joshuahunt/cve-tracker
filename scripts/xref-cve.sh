#!/bin/bash
set -x

input_file=$1

cve_url="http://web.nvd.nist.gov/view/vuln/detail?vulnId="
linus_url="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id="
stable_url_1="https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/commit/?h="
stable_url_2="&id="

BRANCHES="origin/linux-3.0.y origin/linux-3.4.y origin/linux-3.10.y"

echo_err() {
	echo "$@" 1>&2
}

# Version compare
# Returns:
#	0: if both are equal
#	1: if ver1 > ver2
#	-1: if ver2 > ver1
#	255: err
# TODO: Does the doc above match what the fn is doing?
cmp_ver() {
	local ver1=$1
	local ver2=$2
	local retval=0

	if [ "$ver1" == "$ver2" ]; then
		echo 0
		return
	fi

	if [[ "$ver1" == "-" || "$ver2" == "-" ]]; then
		echo 255
		return
	fi
	
	local result=$(echo -e "$ver1\n$ver2" | sort -V | awk 'NR > 1 { exit }; 1')

	if [ "$result" == "$ver1" ]; then
		retval="-1"
	elif [ "$result" == "$ver2" ]; then
		retval="1"
	fi

	echo $retval

}

get_commit_tag() {
        local commit=$1

        pushd /home/johunt/projects/linux-stable > /dev/null

        if [ "$commit" != "-" ]; then
                git describe --contains $commit | awk -F- '{ print $1 }' | sed 's/^v\([2-9]\+\)\.\([0-9]\{1,2\}\)\.\([0-9]\{1,3\}\)\?.*/\1\.\2\.\3/'
        else
                echo $commit
        fi

        popd > /dev/null
}

get_commit_date() {
	local commit=$1
	local start=$2
	local end=$3

	pushd /home/johunt/projects/linux-stable > /dev/null
	git log -n 1 v${start}..v${end} $commit --date=short --pretty=format:%cd
	popd > /dev/null
}

fields=([1]="Public Date" "CVE" "Break Date" "Break Commit" "Break Tag" "Linus Fix Date" "Linus Commit" "Linus Tag" "Stable Date" "Stable Commit" "Stable Tag")

function find_diff_records() {

	local old="$1"
	local new="$2"
	local nr_fields=${#fields[@]}
	local old_field
	local new_field

	local fields_changed=""

	echo -n $new | awk '{ print $2":" }'
	for y in $(seq 1 $nr_fields)
	do
		old_field=$(echo $old | awk '{ print $'$y' }')
		if [ -z "$old_field" ]; then
			old_field="-"
		fi
		new_field=$(echo $new | awk '{ print $'$y' }')

		if [ "$old_field" != "$new_field" ]; then
			echo "${fields[$y]} differs old: $old_field -> new: $new_field"
			if [ -z "$fields_changed" ]; then
				fields_changed="${fields[$y]}"
			else
				fields_changed="$fields_changed,${fields[$y]}"
			fi
		fi
	done
	echo "$fields_changed"
	if [ "$(echo $fields_changed | awk -F, '{ print NF }')" -eq "$nr_fields" ]; then
		echo "This is a new CVE"	
	fi
	echo
}

get_updated_cves() {

	local cve_filename=$1
	local cve_oldfilename="${1}.old"
	local newcve_list="$2"
	local tmp_list
	local update_list
	local i
	
	if [ ! -e "$cve_oldfilename" ]; then
		echo "WARNING: No existing list of CVEs to compare against."
		return
	fi 

	grep -vf $cve_oldfilename $cve_filename

}

mail_info() {

	local SUBJECT="$1 Kernel Vulnerability Report"
	local EMAIL="johunt@akamai.com" 

	/usr/bin/mail -s "$SUBJECT" "$EMAIL" < $MSG
}

for branch in $BRANCHES
do
	filename=$(echo $branch | sed 's/origin\///')
	branch_ver=$(echo $filename | sed -e 's/linux-//' -e 's/\.y//') 
	# FIXME: Use bash string manip instead of awk
	branch_major=$(echo $branch_ver | awk -F. '{ print $1 }')
	branch_minor=$(echo $branch_ver | awk -F. '{ print $2 }')

	if [ -e $filename.db ]; then
		cp $filename.db $filename.db.old
	fi

	while read public_date cve break_date break break_tag fix_date fix fix_tag 
	do
		if [ "$(cmp_ver $fix_tag $branch_ver)" -eq "1" ]; then 
			stable_fix_and_date="$(git --no-pager log -n 1 v${branch_ver}..v${branch_major}.$(( $branch_minor + 1 )) $branch --grep="commit $fix" --date=short --pretty=format:"%H %cd")"
			# FIXME: Use bash string manip instead of awk
			stable_fix=$(echo $stable_fix_and_date | awk '{ print $1 }')
			stable_fix_date=$(echo $stable_fix_and_date | awk '{ print $2 }')
			if [ -z "$stable_fix" ]; then
				stable_fix="-"
				stable_fix_date="-"
				stable_fix_tag="-"
			else
				stable_fix_tag="$(get_commit_tag $stable_fix)"
			fi

		elif [[ "$fix" =~ "local" ]]; then
			stable_fix="-"
			stable_fix_date="-"
			stable_fix_tag="-"
		else
			continue
		fi

		echo $public_date $cve $break_date $break $break_tag $fix_date $fix $fix_tag $stable_fix_date $stable_fix $stable_fix_tag 
	done < $input_file > $filename.db

	updated_cves="$(get_updated_cves $filename.db "$new_cves")"

	MSG=./mail.msg

	( 
		# Keying on the linus commit ID, field 7. I think this should be unique
		for x in $(echo "$updated_cves" | awk '{ print $7 }')
		do
			old="$(grep $x ${filename}.db.old)"
			new="$(grep $x ${filename}.db)"
			find_diff_records "$old" "$new" 
		done

	) | tee $MSG

	if [ -n "$updated_cves" ]; then
		mail_info "$branch_ver"
	fi

	if [ -e "${filename}.db.old" ]; then
		diff_db="$(diff -q $filename.db ${filename}.db.old)"
		if [ -z "$diff_db" ]; then
			echo "No changes to $filename.db"
			continue
		fi 
	fi

	echo '<html>' > $filename-stable-cve-list.html
	{
		echo '<head><link rel="stylesheet" href="css/blue/style.css" type="text/css"></head>'
		echo '<table id="myTable" class="tableSorter" border="0" cellpadding="0" cellspacing="1">'
		echo '<body>'
		echo '<thead>'
		echo '<tr>'
		echo '<th>CVE</th>'
		echo '<th>Break Date</th>'
		echo '<th>Break Tag</th>'
		echo '<th>Break Commit</th>'
		echo '<th>Linus Fix Date</th>'
		echo '<th>Linus Tag</th>'
		echo '<th>Linus Fix Commit</th>'
		echo "<th>$branch_ver Stable Tag</th>"
		echo "<th>$branch_ver Stable Fix</th>"
		echo '</tr>'
		echo '</thead>'
		echo '<tbody>'
		# Input file format
		while read public_date cve break_date break break_tag fix_date fix fix_tag stable_fix_date stable_fix stable_fix_tag 
		do
			if [[ "$(cmp_ver $fix_tag $branch_ver)" -eq "1" || "$fix" =~ "local" ]]; then 
				echo '<tr>'
				echo "<td><a href=${cve_url}${cve}>$cve</a></td>"
				echo "<td>${break_date#-}</td>"
				echo "<td>${break_tag#-}</td>"
				if [ "$break" == "-" ]; then
					echo "<td></td>"
				else
					echo "<td><a href=${linus_url}${break}>${break:0:7}</a></td>"
				fi
				echo "<td>${fix_date#-}</td>"
				echo "<td>${fix_tag#-}</td>"
				if [ "$fix" == "-" ]; then
					echo "<td></td>"
				else
					echo "<td><a href=${linus_url}${fix}>${fix:0:7}</a></td>"
				fi
				echo "<td>${stable_fix_tag#-}</td>"
				if [ "$stable_fix" == "-" ]; then
					echo "<td></td>"
				else
					echo "<td><a href=${stable_url_1}${filename}${stable_url_2}${stable_fix}>${stable_fix:0:7}</a></td>"
				fi
				echo '</tr>'
			fi
		done < ${filename}.db
		echo '</tbody>'
		echo '</table>'
		echo '<script type="text/javascript" src="js/jquery-latest.js"></script>'
		echo '<script type="text/javascript" src="js/jquery.tablesorter.js"></script>'
		echo '<script type="text/javascript">'
		echo '	$(document).ready(function() {'
        	echo '		$.tablesorter.addParser({'
                echo "			id: 'version',"
                echo '			is: function(s) {'
                echo '				return false;'
                echo '			},'
                echo '			format: function(s) {'
                echo "				var ver = s.split('.');"
                echo '				var total_val = 0;'
                echo '				var shift = 65536;'
                echo '				for (var i = 0; i < ver.length; i++) {'
                echo '					total_val += (shift * ver[i]);'
                echo '					shift >>= 8;'
                echo '				}'              
                echo '				return total_val;'
                echo '			},'
                echo "			type: 'numeric'"
        	echo '		});'
        	echo '		$("#myTable").tablesorter({'
                echo '			sortList: [[4,1]],'
                echo '			widgets: ["zebra"],'
                echo '			headers: {'
                echo "				2: { sorter: 'version' },"
                echo "				5: { sorter: 'version' },"
                echo "				7: { sorter: 'version' },"
                echo '			}'
        	echo '		});'
		echo '	});'
		echo '</script>'
		echo '<body>'
		echo '</html>'
	} >> $filename-stable-cve-list.html
done
