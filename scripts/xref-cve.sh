#!/bin/bash
set -x

source config

echo_err() {
	echo "$@" 1>&2
}

# Version compare
# Returns:
#	0: if both are equal
#	1: if ver1 > ver2
#	-1: if ver2 > ver1
#	255: err
# TODO: Does the doc above match what the fn is doing?
cmp_ver() {
	local ver1=$1
	local ver2=$2
	local retval=0

	if [ "$ver1" == "$ver2" ]; then
		echo 0
		return
	fi

	if [[ "$ver1" == "-" || "$ver2" == "-" ]]; then
		echo 255
		return
	fi
	
	local result=$(echo -e "$ver1\n$ver2" | sort -V | awk 'NR > 1 { exit }; 1')

	if [ "$result" == "$ver1" ]; then
		retval="-1"
	elif [ "$result" == "$ver2" ]; then
		retval="1"
	fi

	echo $retval

}

get_commit_tag() {
        local commit=$1

        pushd $STABLE_KERNEL > /dev/null
        if [ "$commit" != "-" ]; then
                git describe --contains $commit | awk -F- '{ print $1 }' | sed 's/^v\([2-9]\+\)\.\([0-9]\{1,2\}\)\.\([0-9]\{1,3\}\)\?.*/\1\.\2\.\3/'
        else
                echo $commit
        fi
        popd > /dev/null
}

get_commit_date() {
	local commit=$1
	local start=$2
	local end=$3

	pushd $STABLE_KERNEL > /dev/null
	git log -n 1 v${start}..v${end} $commit --date=short --pretty=format:%cd
	popd > /dev/null
}

get_commit_msg() {
	local commit=$1

	pushd $STABLE_KERNEL > /dev/null
	git log --stat -n 1 $commit
	popd > /dev/null
}

get_fix_and_date() {

	local ver="$1"
	local major="$2"
	local minor="$3"
	local git_branch="$4"
	local fix_id="$5"

	pushd $STABLE_KERNEL > /dev/null
	git --no-pager log -n 1 v${ver}..v${major}.$(( $minor + 1 )) $git_branch --grep="commit $fix_id" --date=short --pretty=format:"%H %cd"
	popd > /dev/null
}

fields=([1]="Public Date" "CVE" "Break Date" "Break Commit" "Break Tag" "Linus Fix Date" "Linus Commit" "Linus Tag" "Stable Date" "Stable Commit" "Stable Tag")

# Field constants
PUBLIC_DATE=1
CVE=2
BREAK_DATE=3
BREAK_COMMIT=4
BREAK_TAG=5
LINUS_DATE=6
LINUS_COMMIT=7
LINUS_TAG=8
STABLE_DATE=9
STABLE_COMMIT=10
STABLE_TAG=11

function get_fields_index() {
        local value="$1"

        for i in "${!fields[@]}"
        do
                if [ "${fields[$i]}" == "$value" ]; then
                        echo $i
                        break
                fi
        done
}

function find_diff_records() {

	local old="$1"
	local new="$2"
	local nr_fields=${#fields[@]}
	declare -A old_field	
	declare -A new_field
	local field_index
	local new_cve=""
	local fields_changed=""

	echo -n "$new" | awk '{ print $'$CVE'":" }'
	echo "*************"
	echo
	for y in $(seq 1 $nr_fields)
	do
		old_field[$y]=$(echo $old | awk '{ print $'$y' }')
		if [ -z "${old_field[$y]}" ]; then
			old_field[$y]="*"
		fi
		new_field[$y]=$(echo $new | awk '{ print $'$y' }')

		if [ "${old_field[$y]}" != "${new_field[$y]}" ]; then
			if [ -z "$fields_changed" ]; then
				fields_changed="${fields[$y]}"
			else
				fields_changed="$fields_changed,${fields[$y]}"
			fi
		fi
	done

	if [ "$(echo $fields_changed | awk -F, '{ print NF }')" -eq "$nr_fields" ]; then
		echo "*** This is a new CVE ***"
		new_cve="1"
	fi

	if [ "${new_field[$STABLE_TAG]}" != "-" ]; then
		echo "This CVE has been resolved in ${new_field[$STABLE_TAG]}."
		echo "Please pull this or a newer version of the kernel to resolve this security vulnerability."
		echo
	fi
	
	echo "---"
	echo "Description of fix for this vulnerability:"
	get_commit_msg ${new_field[$LINUS_COMMIT]}
	echo "---"

	echo "The following fields have changed: $fields_changed"
        ORIGIFS=$IFS
        IFS=,
        for i in $fields_changed
        do
                field_index=$(get_fields_index $i)
		if [ -z "$new_cve" ]; then 
                	echo "${fields[$field_index]}: ${old_field[$field_index]} -> ${new_field[$field_index]}"
		else
                	echo "${fields[$field_index]}: ${new_field[$field_index]}"
		fi
        done
        IFS=$ORIGIFS
        echo

	# TODO: File bugs from here
	# if [ "$new_cve" -eq "1" ]; then
	# 	#file bug...
	# fi
}

get_updated_cves() {

	local cve_filename=$1
	local cve_oldfilename="${1}.old"
	local newcve_list="$2"
	local tmp_list
	local update_list
	local i
	
	if [ ! -e "$cve_oldfilename" ]; then
		echo "WARNING: No existing list of CVEs to compare against."
		return
	fi 

	grep -vf $cve_oldfilename $cve_filename

}

mail_info() {

	local SUBJECT="$1 Kernel Vulnerability Report"
	local email_list="$2"

	/usr/bin/mail -s "$SUBJECT" "$email_list" < $MSG
}

branch_count=0
for branch in $BRANCHES
do
	filename=$(echo $branch | sed 's/origin\///')
	branch_ver=$(echo $filename | sed -e 's/linux-//' -e 's/\.y//') 
	# FIXME: Use bash string manip instead of awk
	branch_major=$(echo $branch_ver | awk -F. '{ print $1 }')
	branch_minor=$(echo $branch_ver | awk -F. '{ print $2 }')

	if [ -e $DB_PATH/$filename.db ]; then
		cp $DB_PATH/$filename.db $DB_PATH/$filename.db.old
	fi

	while read public_date cve break_date break break_tag fix_date fix fix_tag 
	do
		if [ "$(cmp_ver $fix_tag $branch_ver)" -eq "1" ]; then 
			stable_fix_and_date="$(get_fix_and_date $branch_ver $branch_major $branch_minor $branch $fix)"
			# FIXME: Use bash string manip instead of awk
			stable_fix=$(echo $stable_fix_and_date | awk '{ print $1 }')
			stable_fix_date=$(echo $stable_fix_and_date | awk '{ print $2 }')
			if [ -z "$stable_fix" ]; then
				stable_fix="-"
				stable_fix_date="-"
				stable_fix_tag="-"
			else
				stable_fix_tag="$(get_commit_tag $stable_fix)"
			fi

		elif [[ "$fix" =~ "local" ]]; then
			stable_fix="-"
			stable_fix_date="-"
			stable_fix_tag="-"
		else
			continue
		fi

		echo $public_date $cve $break_date $break $break_tag $fix_date $fix $fix_tag $stable_fix_date $stable_fix $stable_fix_tag 
	done < $CVE_DB > $DB_PATH/$filename.db

	updated_cves="$(get_updated_cves $DB_PATH/$filename.db "$new_cves")"

	MSG="$MAIL_PATH/${filename}-$(date +%d%m%Y).msg"

MAIL_HEADER="
-----------------------------
$REPORT_NAME
$(date +%F)

Stable Branch: $filename

All $filename CVEs:
${GITHUB_URL}${filename}${GITHUB_URL2}

CVE(s) in report:
"

	cve_list="$(echo "$updated_cves" | awk '{ print $'$CVE' }')"
	report="$( 
		echo "*************"
		# Keying on the linus commit ID, field 7. I think this should be unique
		for x in $(echo "$updated_cves" | awk '{ print $'$LINUS_COMMIT' }')
		do
			oldentry="$(grep $x $DB_PATH/${filename}.db.old)"
			newentry="$(grep $x $DB_PATH/${filename}.db)"
			find_diff_records "$oldentry" "$newentry" 
		done

	)"

	(
		echo "$MAIL_HEADER"
		echo "$cve_list"
		echo "-----------------------------"
		echo
		echo "Details:"
		echo
		echo "$report"
	) > $MSG

	if [ -n "$updated_cves" ]; then
		mail_info "$branch_ver" "${EMAIL[$branch_count]}"
	else
		rm -f $MSG
	fi

	(( branch_count++ ))

	if [ -e "$DB_PATH/${filename}.db.old" ]; then
		diff_db="$(diff -q $DB_PATH/$filename.db $DB_PATH/${filename}.db.old)"
		if [ -z "$diff_db" ]; then
			echo "No changes to $DB_PATH/$filename.db"
			continue
		fi 
	fi

	echo '<html>' > $HTML_PATH/$filename-stable-cve-list.html
	{
		echo '<head><link rel="stylesheet" href="css/blue/style.css" type="text/css"></head>'
		echo '<table id="myTable" class="tableSorter" border="0" cellpadding="0" cellspacing="1">'
		echo '<body>'
		echo '<thead>'
		echo '<tr>'
		echo '<th>CVE</th>'
		echo '<th>Break Date</th>'
		echo '<th>Break Tag</th>'
		echo '<th>Break Commit</th>'
		echo '<th>Linus Fix Date</th>'
		echo '<th>Linus Tag</th>'
		echo '<th>Linus Fix Commit</th>'
		echo "<th>$branch_ver Stable Tag</th>"
		echo "<th>$branch_ver Stable Fix</th>"
		echo '</tr>'
		echo '</thead>'
		echo '<tbody>'
		# Input file format
		while read public_date cve break_date break break_tag fix_date fix fix_tag stable_fix_date stable_fix stable_fix_tag 
		do
			if [[ "$(cmp_ver $fix_tag $branch_ver)" -eq "1" || "$fix" =~ "local" ]]; then 
				echo '<tr>'
				echo "<td><a href=${CVE_URL}${cve}>$cve</a></td>"
				echo "<td>${break_date#-}</td>"
				echo "<td>${break_tag#-}</td>"
				if [ "$break" == "-" ]; then
					echo "<td></td>"
				else
					echo "<td><a href=${LINUS_URL}${break}>${break:0:7}</a></td>"
				fi
				echo "<td>${fix_date#-}</td>"
				echo "<td>${fix_tag#-}</td>"
				if [ "$fix" == "-" ]; then
					echo "<td></td>"
				else
					echo "<td><a href=${LINUS_URL}${fix}>${fix:0:7}</a></td>"
				fi
				echo "<td>${stable_fix_tag#-}</td>"
				if [ "$stable_fix" == "-" ]; then
					echo "<td></td>"
				else
					echo "<td><a href=${STABLE_URL1}${filename}${STABLE_URL2}${stable_fix}>${stable_fix:0:7}</a></td>"
				fi
				echo '</tr>'
			fi
		done < $DB_PATH/${filename}.db
		echo '</tbody>'
		echo '</table>'
		echo '<script type="text/javascript" src="js/jquery-latest.js"></script>'
		echo '<script type="text/javascript" src="js/jquery.tablesorter.js"></script>'
		echo '<script type="text/javascript">'
		echo '	$(document).ready(function() {'
        	echo '		$.tablesorter.addParser({'
                echo "			id: 'version',"
                echo '			is: function(s) {'
                echo '				return false;'
                echo '			},'
                echo '			format: function(s) {'
                echo "				var ver = s.split('.');"
                echo '				var total_val = 0;'
                echo '				var shift = 65536;'
                echo '				for (var i = 0; i < ver.length; i++) {'
                echo '					total_val += (shift * ver[i]);'
                echo '					shift >>= 8;'
                echo '				}'              
                echo '				return total_val;'
                echo '			},'
                echo "			type: 'numeric'"
        	echo '		});'
        	echo '		$("#myTable").tablesorter({'
                echo '			sortList: [[4,1]],'
                echo '			widgets: ["zebra"],'
                echo '			headers: {'
                echo "				2: { sorter: 'version' },"
                echo "				5: { sorter: 'version' },"
                echo "				7: { sorter: 'version' },"
                echo '			}'
        	echo '		});'
		echo '	});'
		echo '</script>'
		echo '<body>'
		echo '</html>'
	} >> $HTML_PATH/$filename-stable-cve-list.html
done
