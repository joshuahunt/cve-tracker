#!/bin/bash
set -x

input_file=$1

cve_url="http://web.nvd.nist.gov/view/vuln/detail?vulnId="
linus_url="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id="
stable_url_1="https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/commit/?h="
stable_url_2="&id="

echo_err() {
	echo "$@" 1>&2
}

# Version compare
# Returns:
#	0: if both are equal
#	1: if ver1 > ver2
#	-1: if ver2 > ver1
#	255: err
# TODO: Does the doc above match what the fn is doing?
cmp_ver() {
	local ver1=$1
	local ver2=$2
	local retval=0

	#echo_err "comparing $ver1 to $ver2"
	if [ "$ver1" == "$ver2" ]; then
		echo 0
		return
	fi

	if [[ "$ver1" == "-" || "$ver2" == "-" ]]; then
		echo 255
		return
	fi
	
	local result=$(echo -e "$ver1\n$ver2" | sort -V | awk 'NR > 1 { exit }; 1')

	if [ "$result" == "$ver1" ]; then
		retval="-1"
	elif [ "$result" == "$ver2" ]; then
		retval="1"
	fi

	echo $retval

	#echo_err $retval
}

get_commit_tag() {
        local commit=$1

        pushd /home/johunt/projects/linux-stable > /dev/null

        if [ "$commit" != "-" ]; then
                git describe --contains $commit | awk -F- '{ print $1 }' | sed 's/^v\([2-9]\+\)\.\([0-9]\{1,2\}\)\.\([0-9]\{1,3\}\)\?.*/\1\.\2\.\3/'
        else
                echo $commit
        fi

        popd > /dev/null
}


get_commit_date() {
	local commit=$1
	local start=$2
	local end=$3

	pushd /home/johunt/projects/linux-stable > /dev/null
	git log -n 1 v${start}..v${end} $commit --date=short --pretty=format:%cd
	popd > /dev/null
}

get_new_cves() {

	local cve_filename=$1
	local cve_oldfilename="${1}.old"
	local tmp_cve
	local i
	
	if [ ! -e "$cve_oldfilename" ]; then
		echo "WARNING: No existing list of CVEs to compare against."
		return
	fi 

	diff -C0 $cve_oldfilename $cve_filename | grep -e '^+' | sed 's/^\+[[:space:]]\+//' | awk '{ print $2 }' | sort -u

}

mail_info() {

	local new_list="$1"
	local updated_list="$2"
	local SUBJECT="$3 Kernel Vulnerability Report"
	local db=$4	
	local EMAIL="johunt@akamai.com" 
	local MSG="./mail.msg"
	local x
	local y
	local fixed_in

	{
		echo "New CVEs:"
		for x in $new_list
		do
			fixed_in="$(grep $x $db | awk '{ print $NF }')"
			for y in $fixed_in
			do
				if [ "$y" != "-" ]; then
					echo "$x is fixed in $y. Please pull this version of $branch_ver." 
				else
					echo "$x is not resolved yet in $branch_ver or may not be applicable."
				fi
			done
		done

		echo "Updated CVEs:"
		# TODO: Determine what was updated and highlight that in the report
		# 	For ex: 'The "$fixed_in" field changed, grab this version of "$branch_ver"'
		echo "$updated_list"

	} > $MSG	

	/usr/bin/mail -s "$SUBJECT" "$EMAIL" < $MSG
}

# It makes sense to check for new CVEs in the cve.db file, but for updated CVEs
# I think we need to check them against the previous version db file. This way you know
# which fields changed and can handle them accordingly
get_updated_cves() {

	local cve_filename=$1
	local cve_oldfilename="${1}.old"
	local tmp_cve
	local i
	
	if [ ! -e "$cve_oldfilename" ]; then
		echo "WARNING: No existing list of CVEs to compare against."
		return
	fi 

	diff -C0 $cve_oldfilename $cve_filename | grep -e '^!' | sed 's/^\![[:space:]]\+//' #| awk '{ print $2 }' | sort -u

}

new_cves="$(get_new_cves $input_file)"
if [ -n "$new_cves" ]; then
	echo "New CVEs:"
	echo "$new_cves"
fi

updated_cves="$(get_updated_cves $input_file)"
if [ -n "$updated_cves" ]; then
	echo "Updated CVEs:"
	echo "$updated_cves"
fi

# TODO: Should stop the script short if nothing new has occurred
# 	however I think we have to go through the loop below
#	to see if any new fixes are found

# Generate tmp db file for each kernel version including the stable commit info
# Then use that to create the html reports. We can also use it to generate the notification
# mails
for branch in origin/linux-3.0.y origin/linux-3.4.y origin/linux-3.10.y
#for branch in origin/linux-3.10.y
do
	filename=$(echo $branch | sed 's/origin\///')
	branch_ver=$(echo $filename | sed -e 's/linux-//' -e 's/\.y//') 
	# FIXME: Use bash string manip instead of awk
	branch_major=$(echo $branch_ver | awk -F. '{ print $1 }')
	branch_minor=$(echo $branch_ver | awk -F. '{ print $2 }')

	# TODO: We should copy over the old $filename.db to .old so we can diff against it
	#	to determine what's changed for this particular version

	if [ -e $filename.db ]; then
		cp $filename.db $filename.db.old
	fi

	while read public_date cve break_date break break_tag fix_date fix fix_tag 
	do
		if [ "$(cmp_ver $fix_tag $branch_ver)" -eq "1" ]; then 
			stable_fix_and_date="$(git --no-pager log -n 1 v${branch_ver}..v${branch_major}.$(( $branch_minor + 1 )) $branch --grep="commit $fix" --date=short --pretty=format:"%H %cd")"
			# FIXME: Use bash string manip instead of awk
			stable_fix=$(echo $stable_fix_and_date | awk '{ print $1 }')
			stable_fix_date=$(echo $stable_fix_and_date | awk '{ print $2 }')
			if [ -z "$stable_fix" ]; then
				stable_fix="-"
				stable_fix_date="-"
				stable_fix_tag="-"
			else
				#stable_fix_date="$(get_commit_date $stable_fix $branch_ver $fix_tag)"
				stable_fix_tag="$(get_commit_tag $stable_fix)"
			fi

		elif [[ "$fix" =~ "local" ]]; then
			stable_fix="-"
			stable_fix_date="-"
			stable_fix_tag="-"
		else
			continue
		fi

		echo $public_date $cve $break_date $break $break_tag $fix_date $fix $fix_tag $stable_fix_date $stable_fix $stable_fix_tag 
	done < $input_file > $filename.db

	new_cves="$(get_new_cves $filename.db)"

	updated_cves="$(get_updated_cves $filename.db)"

	if [[ -n "$new_cves" || -n "$updated_cves" ]]; then
		mail_info "$new_cves" "$updated_cves" "$branch_ver" "$filename.db"
	fi

done

for branch in origin/linux-3.0.y origin/linux-3.4.y origin/linux-3.10.y
#for branch in origin/linux-3.10.y
do
	filename=$(echo $branch | sed 's/origin\///')
	branch_ver=$(echo $filename | sed -e 's/linux-//' -e 's/\.y//') 

	diff_db="$(diff -q $filename.db ${filename}.db.old)"
	if [ -z "$diff_db" ]; then
		echo "No changes to $filename.db"
		continue
	fi 

	echo '<html>' > $filename-stable-cve-list.html
	{
		echo '<head><link rel="stylesheet" href="css/blue/style.css" type="text/css"></head>'
		echo '<table id="myTable" class="tableSorter" border="0" cellpadding="0" cellspacing="1">'
		echo '<body>'
		echo '<thead>'
		echo '<tr>'
		echo '<th>Public Date</th>'
		echo '<th>CVE</th>'
		echo '<th>Break Date</th>'
		echo '<th>Break Tag</th>'
		echo '<th>Break Commit</th>'
		echo '<th>Linus Fix Date</th>'
		echo '<th>Linus Tag</th>'
		echo '<th>Linus Fix Commit</th>'
		echo "<th>$branch_ver Stable Tag</th>"
		echo "<th>$branch_ver Stable Fix</th>"
		echo '</tr>'
		echo '</thead>'
		echo '<tbody>'
		# Input file format
		while read public_date cve break_date break break_tag fix_date fix fix_tag stable_fix_date stable_fix stable_fix_tag 
		do
			if [[ "$(cmp_ver $fix_tag $branch_ver)" -eq "1" || "$fix" =~ "local" ]]; then 
				echo '<tr>'
				echo "<td>$public_date</td>"
				echo "<td><a href=${cve_url}${cve}>$cve</a></td>"
				echo "<td>$break_date</td>"
				echo "<td>$break_tag</td>"
				echo "<td><a href=${linus_url}${break}>${break:0:7}</a></td>"
				echo "<td>$fix_date</td>"
				echo "<td>$fix_tag</td>"
				echo "<td><a href=${linus_url}${fix}>${fix:0:7}</a></td>"
				echo "<td>$stable_fix_tag</td>"
				echo "<td><a href=${stable_url_1}${filename}${stable_url_2}${stable_fix}>${stable_fix:0:7}</a></td>"
				echo '</tr>'
			fi
		done < ${filename}.db
		echo '</tbody>'
		echo '</table>'
		echo '<script type="text/javascript" src="js/jquery-latest.js"></script>'
		echo '<script type="text/javascript" src="js/jquery.tablesorter.js"></script>'
		echo '<script type="text/javascript">'
		# FIXME: Sorting is broken now... Need to fix that.
		echo '$(document).ready(function() {'
		echo '	$("#myTable").tablesorter({sortList: [[5,1]]});'
		echo '});'
		echo '</script>'
		echo '<body>'
		echo '</html>'
	} >> $filename-stable-cve-list.html
done
