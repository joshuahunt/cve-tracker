#!/bin/bash
#set -x

# Source global config info
source config
source common

DATE="$(date +%d%m%Y)"

# TODO: Add lock file so we can only run one instance of this at a time.
#	If we do have two instances then the db files can get corrupted
#	very easily.

# Basic db check and just look at the # of fields like so:
#awk '{ if (NF != 8) print $0 }' cve.db

pushd $SCRIPTS_PATH

# First thing, sync to the latest version of everything

# TODO: Catch errors in syncing
# Sync to latest $UBUNTU_TRACKER
# For initial checkout use:
# bzr branch lp:ubuntu-cve-tracker ~/projects/ubuntu-cve-tracker/
pushd $UBUNTU_TRACKER
bzr merge
bzr commit -m "Merge $DATE from main branch"
popd

# Sync stable kernel
pushd $STABLE_KERNEL
git checkout master
git pull
popd

if [ ! -e "$CVE_DB" ]; then
	echo
	echo "No CVE DB Found!"
	echo
	while :; do
		read -p "Would you like to create a new CVE DB file?" yn
		case $yn in
			[Yy]* ) touch $CVE_DB; break;;
			[Nn]* ) exit 1;;
			* ) echo "Please enter yes or no.";;
		esac
	done
fi

mv $CVE_DB ${CVE_DB}.old

time (
	for x in active retired
	do
		pushd $UBUNTU_TRACKER/$x > /dev/null
		get_cves
		popd > /dev/null
	done > $CVE_DB
)

# Append CVE override info to cve.list
cat $DB_PATH/override >> $CVE_DB

sort -o $CVE_DB -k2,3 $CVE_DB

popd

branch_count=0
for branch in $BRANCHES
do
	filename=$(echo $branch | sed 's/origin\///')
	branch_ver=$(echo $filename | sed -e 's/linux-//' -e 's/\.y//') 
	branch_major=$(echo $branch_ver | awk -F. '{ print $1 }')
	branch_minor=$(echo $branch_ver | awk -F. '{ print $2 }')

	if [ -e $DB_PATH/$filename.db ]; then
		cp $DB_PATH/$filename.db $DB_PATH/$filename.db.old
	fi

	while read public_date cve break_date break break_tag fix_date fix fix_tag 
	do
		if [ $(cmp_ver $fix_tag $branch_ver) -eq 1 ]; then 
			stable_fix_and_date="$(get_fix_and_date $branch_ver $branch_major $branch_minor $branch $fix)"
			stable_fix=$(echo $stable_fix_and_date | awk '{ print $1 }')
			stable_fix_date=$(echo $stable_fix_and_date | awk '{ print $2 }')
			if [ -z "$stable_fix" ]; then
				stable_fix="-"
				stable_fix_date="-"
				stable_fix_tag="-"
			else
				stable_fix_tag="$(get_stable_commit_tag $stable_fix)"
			fi

		elif [[ "$fix" =~ "local" ]]; then
			stable_fix="-"
			stable_fix_date="-"
			stable_fix_tag="-"
		else
			continue
		fi

		echo $public_date $cve $break_date $break $break_tag $fix_date $fix $fix_tag $stable_fix_date $stable_fix $stable_fix_tag 
	done < $CVE_DB > $DB_PATH/$filename.db

	updated_cves="$(get_updated_cves $DB_PATH/$filename.db)"

	MSG="$MAIL_PATH/${filename}-$(date +%d%m%Y).msg"

MAIL_HEADER="
-----------------------------
$REPORT_NAME
$(date +%F)

Stable Branch: $filename

All $filename CVEs:
${GITHUB_URL}${filename}${GITHUB_URL2}

CVE(s) in report:
"

	cve_list="$(echo "$updated_cves" | awk '{ print $'$CVE' }')"
	report="$( 
		echo "*************"
		# Keying on the linus commit ID, field 7. I think this should be unique
		for x in $(echo "$updated_cves" | awk '{ print $'$LINUS_COMMIT' }')
		do
			oldentry="$(grep $x $DB_PATH/${filename}.db.old)"
			newentry="$(grep $x $DB_PATH/${filename}.db)"
			find_diff_records "$oldentry" "$newentry" 
		done

	)"

	(
		echo "$MAIL_HEADER"
		echo "$cve_list"
		echo "-----------------------------"
		echo
		echo "Details:"
		echo
		echo "$report"
	) > $MSG

	if [ -n "$updated_cves" ]; then
		mail_info "$branch_ver" "${EMAIL[$branch_count]}"
	else
		rm -f $MSG
	fi

	(( branch_count++ ))

	if [ -e "$DB_PATH/${filename}.db.old" ]; then
		diff_db="$(diff -q $DB_PATH/$filename.db $DB_PATH/${filename}.db.old)"
		if [ -z "$diff_db" ]; then
			echo "No changes to $DB_PATH/$filename.db"
			continue
		fi 
	fi

	echo '<html>' > $HTML_PATH/$filename-stable-cve-list.html
	{
		echo '<head><link rel="stylesheet" href="css/blue/style.css" type="text/css"></head>'
		echo '<table id="myTable" class="tableSorter" border="0" cellpadding="0" cellspacing="1">'
		echo '<body>'
		echo '<thead>'
		echo '<tr>'
		echo '<th>CVE</th>'
		echo '<th>Linus Fix Date</th>'
		echo '<th>Linus Tag</th>'
		echo '<th>Linus Fix Commit</th>'
		echo "<th>$branch_ver Stable Tag</th>"
		echo "<th>$branch_ver Stable Fix</th>"
		echo '<th>Break Date</th>'
		echo '<th>Break Tag</th>'
		echo '<th>Break Commit</th>'
		echo '</tr>'
		echo '</thead>'
		echo '<tbody>'
		# Input file format
		while read public_date cve break_date break break_tag fix_date fix fix_tag stable_fix_date stable_fix stable_fix_tag 
		do
			if [[ $(cmp_ver $fix_tag $branch_ver) -eq 1 || "$fix" =~ "local" ]]; then 
				echo '<tr>'
				echo "<td><a href=${CVE_URL}${cve}>$cve</a></td>"
				echo "<td>${fix_date#-}</td>"
				echo "<td>${fix_tag#-}</td>"
				if [ "$fix" == "-" ]; then
					echo "<td></td>"
				else
					echo "<td><a href=${LINUS_URL}${fix}>${fix:0:12}</a></td>"
				fi
				echo "<td>${stable_fix_tag#-}</td>"
				if [ "$stable_fix" == "-" ]; then
					echo "<td></td>"
				else
					echo "<td><a href=${STABLE_URL1}${filename}${STABLE_URL2}${stable_fix}>${stable_fix:0:12}</a></td>"
				fi
				echo "<td>${break_date#-}</td>"
				echo "<td>${break_tag#-}</td>"
				if [ "$break" == "-" ]; then
					echo "<td></td>"
				else
					echo "<td><a href=${LINUS_URL}${break}>${break:0:12}</a></td>"
				fi
				echo '</tr>'
			fi
		done < $DB_PATH/${filename}.db
		echo '</tbody>'
		echo '</table>'
		echo '<script type="text/javascript" src="js/jquery-latest.js"></script>'
		echo '<script type="text/javascript" src="js/jquery.tablesorter.js"></script>'
		echo '<script type="text/javascript">'
		echo '	$(document).ready(function() {'
        	echo '		$.tablesorter.addParser({'
                echo "			id: 'version',"
                echo '			is: function(s) {'
                echo '				return false;'
                echo '			},'
                echo '			format: function(s) {'
                echo "				var ver = s.split('.');"
                echo '				var total_val = 0;'
                echo '				var shift = 65536;'
                echo '				for (var i = 0; i < ver.length; i++) {'
                echo '					total_val += (shift * ver[i]);'
                echo '					shift >>= 8;'
                echo '				}'              
                echo '				return total_val;'
                echo '			},'
                echo "			type: 'numeric'"
        	echo '		});'
        	echo '		$("#myTable").tablesorter({'
                echo '			sortList: [[2,1]],'
                echo '			widgets: ["zebra"],'
                echo '			headers: {'
                echo "				2: { sorter: 'version' },"
                echo "				5: { sorter: 'version' },"
                echo "				7: { sorter: 'version' },"
                echo '			}'
        	echo '		});'
		echo '	});'
		echo '</script>'
		echo '<body>'
		echo '</html>'
	} >> $HTML_PATH/$filename-stable-cve-list.html
done

popd

# Commit any new mails, updated db, or updated html reports
# I don't want to commit things which are not part of the nightly
# run which may have been left in an uncommitted state from something
# else
git add $MAIL_PATH/*.msg
git add $HTML_PATH/*.html
git add $DB_PATH/*
git commit -m "Nightly automated update - $DATE"
