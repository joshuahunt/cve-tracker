#!/bin/bash
#set -x

CVE_TRACKER="/home/johunt/projects/cve-tracker"
UBUNTU_TRACKER="/home/johunt/projects/ubuntu-cve-tracker"
STABLE_KERNEL="/home/johunt/projects/linux-stable"
LINUX_KERNEL="/home/johunt/projects/linux-2.6"

CVE_DB=$CVE_TRACKER/cve.db

DATE="$(date +%d%m%Y)"

# TODO: Add lock file so we can only run one instance of this at a time.
#	If we do have two instances then the db files can get corrupted
#	very easily.

# Basic db check and just look at the # of fields like so:
#awk '{ if (NF != 8) print $0 }' cve.db

pushd $CVE_TRACKER/scripts

# First thing, sync to the latest version of everything

# TODO: Catch errors in syncing
# Sync to latest $UBUNTU_TRACKER
pushd $UBUNTU_TRACKER
bzr merge
bzr commit -m "Merge $DATE from main branch"
popd

# Sync stable kernel
pushd $STABLE_KERNEL
git checkout master
git pull
popd

pushd $UBUNTU_TRACKER
# TODO: This should not be copied over anymore. Need to modify the script
#	to be able to run from the repo.
cp $CVE_TRACKER/scripts/get-cves.sh $UBUNTU_TRACKER

if [ ! -e "$CVE_DB" ]; then
	echo "No CVE DB Found!"
	# TODO: Make this ask if we should create a new one
	exit 1
fi

cp $CVE_DB ${CVE_DB}.old

time (
	for x in active retired
	do
		pushd $x > /dev/null
		$UBUNTU_TRACKER/get-cves.sh $CVE_DB
		popd > /dev/null
	done > $CVE_TRACKER/cve.list
)

time (
sort -k2,3 $CVE_TRACKER/cve.list > $CVE_DB
)

popd
time $CVE_TRACKER/scripts/xref-cve.sh $CVE_DB

popd

# TODO: All files (db and otherwise) should be stored in the run directory
# TODO: We should be checking the results into git here...
# TODO: Created project page in gh-pages branch. Need to start storing the
#	reports there so they're externally accessible and checked in
#	after each run

