
-----------------------------
Stable Kernel Security Notice
2018-05-20

Stable Branch: linux-4.9.y

All linux-4.9.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.9.y-stable-cve-list.html

CVE(s) in report:

CVE-2018-1000200
CVE-2018-10087
CVE-2018-10322
CVE-2018-10323
-----------------------------

Details:

*************
CVE-2018-1000200:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 27ae357fa82be5ab73b2ef8d39dcb8ca2563483a
Author: David Rientjes <rientjes@google.com>
Date:   Fri May 11 16:02:04 2018 -0700

    mm, oom: fix concurrent munlock and oom reaper unmap, v3
    
    Since exit_mmap() is done without the protection of mm->mmap_sem, it is
    possible for the oom reaper to concurrently operate on an mm until
    MMF_OOM_SKIP is set.
    
    This allows munlock_vma_pages_all() to concurrently run while the oom
    reaper is operating on a vma.  Since munlock_vma_pages_range() depends
    on clearing VM_LOCKED from vm_flags before actually doing the munlock to
    determine if any other vmas are locking the same memory, the check for
    VM_LOCKED in the oom reaper is racy.
    
    This is especially noticeable on architectures such as powerpc where
    clearing a huge pmd requires serialize_against_pte_lookup().  If the pmd
    is zapped by the oom reaper during follow_page_mask() after the check
    for pmd_none() is bypassed, this ends up deferencing a NULL ptl or a
    kernel oops.
    
    Fix this by manually freeing all possible memory from the mm before
    doing the munlock and then setting MMF_OOM_SKIP.  The oom reaper can not
    run on the mm anymore so the munlock is safe to do in exit_mmap().  It
    also matches the logic that the oom reaper currently uses for
    determining when to set MMF_OOM_SKIP itself, so there's no new risk of
    excessive oom killing.
    
    This issue fixes CVE-2018-1000200.
    
    Link: http://lkml.kernel.org/r/alpine.DEB.2.21.1804241526320.238665@chino.kir.corp.google.com
    Fixes: 212925802454 ("mm: oom: let oom_reap_task and exit_mmap run concurrently")
    Signed-off-by: David Rientjes <rientjes@google.com>
    Suggested-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>	[4.14+]
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 include/linux/oom.h |  2 ++
 mm/mmap.c           | 44 +++++++++++++++++------------
 mm/oom_kill.c       | 81 ++++++++++++++++++++++++++++-------------------------
 3 files changed, 71 insertions(+), 56 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-04-24
CVE: CVE-2018-1000200
Break Date: 2017-09-06
Break Commit: 212925802454672e6cd2949a727f5e2c1377bf06
Break Tag: 4.14-rc1
Linus Fix Date: 2018-05-11
Linus Commit: 27ae357fa82be5ab73b2ef8d39dcb8ca2563483a
Linus Tag: 4.17-rc5
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2018-10087:
*************

This CVE has been resolved in 4.9.101.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit dd83c161fbcc5d8be637ab159c0de015cbff5ba4
Author: zhongjiang <zhongjiang@huawei.com>
Date:   Mon Jul 10 15:53:01 2017 -0700

    kernel/exit.c: avoid undefined behaviour when calling wait4()
    
    wait4(-2147483648, 0x20, 0, 0xdd0000) triggers:
    UBSAN: Undefined behaviour in kernel/exit.c:1651:9
    
    The related calltrace is as follows:
    
      negation of -2147483648 cannot be represented in type 'int':
      CPU: 9 PID: 16482 Comm: zj Tainted: G    B          ---- -------   3.10.0-327.53.58.71.x86_64+ #66
      Hardware name: Huawei Technologies Co., Ltd. Tecal RH2285          /BC11BTSA              , BIOS CTSAV036 04/27/2011
      Call Trace:
        dump_stack+0x19/0x1b
        ubsan_epilogue+0xd/0x50
        __ubsan_handle_negate_overflow+0x109/0x14e
        SyS_wait4+0x1cb/0x1e0
        system_call_fastpath+0x16/0x1b
    
    Exclude the overflow to avoid the UBSAN warning.
    
    Link: http://lkml.kernel.org/r/1497264618-20212-1-git-send-email-zhongjiang@huawei.com
    Signed-off-by: zhongjiang <zhongjiang@huawei.com>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: David Rientjes <rientjes@google.com>
    Cc: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
    Cc: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>
    Cc: Xishi Qiu <qiuxishi@huawei.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 kernel/exit.c | 4 ++++
 1 file changed, 4 insertions(+)
---
The following fields have changed: Stable Date,Stable Commit,Stable Tag
Stable Date: - -> 2018-05-19
Stable Commit: - -> 04103c29b6cc1ffcf9efe167a07e882be68f8367
Stable Tag: - -> 4.9.101

CVE-2018-10322:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit b42db0860e13067fcc7cbfba3966c9e652668bbc
Author: Eric Sandeen <sandeen@sandeen.net>
Date:   Mon Apr 16 23:06:53 2018 -0700

    xfs: enhance dinode verifier
    
    Add several more validations to xfs_dinode_verify:
    
    - For LOCAL data fork formats, di_nextents must be 0.
    - For LOCAL attr fork formats, di_anextents must be 0.
    - For inodes with no attr fork offset,
      - format must be XFS_DINODE_FMT_EXTENTS if set at all
      - di_anextents must be 0.
    
    Thanks to dchinner for pointing out a couple related checks I had
    forgotten to add.
    
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=199377
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

 fs/xfs/libxfs/xfs_inode_buf.c | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-04-24
CVE: CVE-2018-10322
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2018-04-17
Linus Commit: b42db0860e13067fcc7cbfba3966c9e652668bbc
Linus Tag: 4.17-rc4
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2018-10323:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 2c4306f719b083d17df2963bc761777576b8ad1b
Author: Eric Sandeen <sandeen@redhat.com>
Date:   Mon Apr 16 23:07:27 2018 -0700

    xfs: set format back to extents if xfs_bmap_extents_to_btree
    
    If xfs_bmap_extents_to_btree fails in a mode where we call
    xfs_iroot_realloc(-1) to de-allocate the root, set the
    format back to extents.
    
    Otherwise we can assume we can dereference ifp->if_broot
    based on the XFS_DINODE_FMT_BTREE format, and crash.
    
    Bugzilla: https://bugzilla.kernel.org/show_bug.cgi?id=199423
    Signed-off-by: Eric Sandeen <sandeen@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Darrick J. Wong <darrick.wong@oracle.com>
    Signed-off-by: Darrick J. Wong <darrick.wong@oracle.com>

 fs/xfs/libxfs/xfs_bmap.c | 4 ++++
 1 file changed, 4 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-04-24
CVE: CVE-2018-10323
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2018-04-17
Linus Commit: 2c4306f719b083d17df2963bc761777576b8ad1b
Linus Tag: 4.17-rc4
Stable Date: -
Stable Commit: -
Stable Tag: -
