
-----------------------------
Stable Kernel Security Notice
2017-11-07

Stable Branch: linux-4.4.y

All linux-4.4.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.4.y-stable-cve-list.html

CVE(s) in report:

CVE-2017-15306
CVE-2017-16525
CVE-2017-16525
CVE-2017-16526
CVE-2017-16527
CVE-2017-16528
CVE-2017-16529
CVE-2017-16530
CVE-2017-16531
CVE-2017-16532
CVE-2017-16533
CVE-2017-16534
CVE-2017-16535
-----------------------------

Details:

*************
CVE-2017-15306:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit ac64115a66c18c01745bbd3c47a36b124e5fd8c0
Author: Greg Kurz <groug@kaod.org>
Date:   Thu Sep 14 23:56:25 2017 +0200

    KVM: PPC: Fix oops when checking KVM_CAP_PPC_HTM
    
    The following program causes a kernel oops:
    
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>
    #include <sys/ioctl.h>
    #include <linux/kvm.h>
    
    main()
    {
        int fd = open("/dev/kvm", O_RDWR);
        ioctl(fd, KVM_CHECK_EXTENSION, KVM_CAP_PPC_HTM);
    }
    
    This happens because when using the global KVM fd with
    KVM_CHECK_EXTENSION, kvm_vm_ioctl_check_extension() gets
    called with a NULL kvm argument, which gets dereferenced
    in is_kvmppc_hv_enabled(). Spotted while reading the code.
    
    Let's use the hv_enabled fallback variable, like everywhere
    else in this function.
    
    Fixes: 23528bb21ee2 ("KVM: PPC: Introduce KVM_CAP_PPC_HTM")
    Cc: stable@vger.kernel.org # v4.7+
    Signed-off-by: Greg Kurz <groug@kaod.org>
    Reviewed-by: David Gibson <david@gibson.dropbear.id.au>
    Reviewed-by: Thomas Huth <thuth@redhat.com>
    Signed-off-by: Paul Mackerras <paulus@ozlabs.org>

 arch/powerpc/kvm/powerpc.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-06
CVE: CVE-2017-15306
Break Date: 2016-08-01
Break Commit: 23528bb21ee2c9b27f3feddd77a2a3351a8df148
Break Tag: 4.8
Linus Fix Date: 2017-10-14
Linus Commit: ac64115a66c18c01745bbd3c47a36b124e5fd8c0
Linus Tag: 4.14
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-16525:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.93.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 299d7572e46f98534033a9e65973f13ad1ce9047
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 4 11:01:13 2017 +0200

    USB: serial: console: fix use-after-free after failed setup
    
    Make sure to reset the USB-console port pointer when console setup fails
    in order to avoid having the struct usb_serial be prematurely freed by
    the console code when the device is later disconnected.
    
    Fixes: 73e487fdb75f ("[PATCH] USB console: fix disconnection issues")
    Cc: stable <stable@vger.kernel.org>	# 2.6.18
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

 drivers/usb/serial/console.c | 1 +
 1 file changed, 1 insertion(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16525
Break Date: 2006-06-21
Break Commit: 73e487fdb75f8abf230968dbf73a3dc3b16808d3
Break Tag: 2.6
Linus Fix Date: 2017-10-09
Linus Commit: 299d7572e46f98534033a9e65973f13ad1ce9047
Linus Tag: 4.14
Stable Date: 2017-10-18
Stable Commit: 208563455aac7540755bb9d8e8edaf7c5ef61d8c
Stable Tag: 4.4.93

CVE-2017-16525:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit bd998c2e0df0469707503023d50d46cf0b10c787
Author: Johan Hovold <johan@kernel.org>
Date:   Wed Oct 4 11:01:12 2017 +0200

    USB: serial: console: fix use-after-free on disconnect
    
    A clean-up patch removing two redundant NULL-checks from the console
    disconnect handler inadvertently also removed a third check. This could
    lead to the struct usb_serial being prematurely freed by the console
    code when a driver accepts but does not register any ports for an
    interface which also lacks endpoint descriptors.
    
    Fixes: 0e517c93dc02 ("USB: serial: console: clean up sanity checks")
    Cc: stable <stable@vger.kernel.org>     # 4.11
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
    Signed-off-by: Johan Hovold <johan@kernel.org>

 drivers/usb/serial/console.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16525
Break Date: 2017-02-08
Break Commit: 0e517c93dc027e49d4523fe32631606b12f0752d
Break Tag: 4.11
Linus Fix Date: 2017-10-09
Linus Commit: bd998c2e0df0469707503023d50d46cf0b10c787
Linus Tag: 4.14
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-16526:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.92.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit bbf26183b7a6236ba602f4d6a2f7cade35bba043
Author: Andrey Konovalov <andreyknvl@google.com>
Date:   Thu Sep 14 14:30:55 2017 +0200

    uwb: properly check kthread_run return value
    
    uwbd_start() calls kthread_run() and checks that the return value is
    not NULL. But the return value is not NULL in case kthread_run() fails,
    it takes the form of ERR_PTR(-EINTR).
    
    Use IS_ERR() instead.
    
    Also add a check to uwbd_stop().
    
    Signed-off-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

 drivers/uwb/uwbd.c | 12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16526
Break Date: 2008-09-17
Break Commit: 183b9b592a622a7719ee38e275fd7ff3aaf74d0d
Break Tag: 2.6
Linus Fix Date: 2017-09-18
Linus Commit: bbf26183b7a6236ba602f4d6a2f7cade35bba043
Linus Tag: 4.14
Stable Date: 2017-10-12
Stable Commit: 5a21af11c6810b936b17a2c5c69518be0da8f4c3
Stable Tag: 4.4.92

CVE-2017-16527:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.93.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 124751d5e63c823092060074bd0abaae61aaa9c4
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Oct 10 14:10:32 2017 +0200

    ALSA: usb-audio: Kill stray URB at exiting
    
    USB-audio driver may leave a stray URB for the mixer interrupt when it
    exits by some error during probe.  This leads to a use-after-free
    error as spotted by syzkaller like:
      ==================================================================
      BUG: KASAN: use-after-free in snd_usb_mixer_interrupt+0x604/0x6f0
      Call Trace:
       <IRQ>
       __dump_stack lib/dump_stack.c:16
       dump_stack+0x292/0x395 lib/dump_stack.c:52
       print_address_description+0x78/0x280 mm/kasan/report.c:252
       kasan_report_error mm/kasan/report.c:351
       kasan_report+0x23d/0x350 mm/kasan/report.c:409
       __asan_report_load8_noabort+0x19/0x20 mm/kasan/report.c:430
       snd_usb_mixer_interrupt+0x604/0x6f0 sound/usb/mixer.c:2490
       __usb_hcd_giveback_urb+0x2e0/0x650 drivers/usb/core/hcd.c:1779
       ....
    
      Allocated by task 1484:
       save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
       save_stack+0x43/0xd0 mm/kasan/kasan.c:447
       set_track mm/kasan/kasan.c:459
       kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:551
       kmem_cache_alloc_trace+0x11e/0x2d0 mm/slub.c:2772
       kmalloc ./include/linux/slab.h:493
       kzalloc ./include/linux/slab.h:666
       snd_usb_create_mixer+0x145/0x1010 sound/usb/mixer.c:2540
       create_standard_mixer_quirk+0x58/0x80 sound/usb/quirks.c:516
       snd_usb_create_quirk+0x92/0x100 sound/usb/quirks.c:560
       create_composite_quirk+0x1c4/0x3e0 sound/usb/quirks.c:59
       snd_usb_create_quirk+0x92/0x100 sound/usb/quirks.c:560
       usb_audio_probe+0x1040/0x2c10 sound/usb/card.c:618
       ....
    
      Freed by task 1484:
       save_stack_trace+0x1b/0x20 arch/x86/kernel/stacktrace.c:59
       save_stack+0x43/0xd0 mm/kasan/kasan.c:447
       set_track mm/kasan/kasan.c:459
       kasan_slab_free+0x72/0xc0 mm/kasan/kasan.c:524
       slab_free_hook mm/slub.c:1390
       slab_free_freelist_hook mm/slub.c:1412
       slab_free mm/slub.c:2988
       kfree+0xf6/0x2f0 mm/slub.c:3919
       snd_usb_mixer_free+0x11a/0x160 sound/usb/mixer.c:2244
       snd_usb_mixer_dev_free+0x36/0x50 sound/usb/mixer.c:2250
       __snd_device_free+0x1ff/0x380 sound/core/device.c:91
       snd_device_free_all+0x8f/0xe0 sound/core/device.c:244
       snd_card_do_free sound/core/init.c:461
       release_card_device+0x47/0x170 sound/core/init.c:181
       device_release+0x13f/0x210 drivers/base/core.c:814
       ....
    
    Actually such a URB is killed properly at disconnection when the
    device gets probed successfully, and what we need is to apply it for
    the error-path, too.
    
    In this patch, we apply snd_usb_mixer_disconnect() at releasing.
    Also introduce a new flag, disconnected, to struct usb_mixer_interface
    for not performing the disconnection procedure twice.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

 sound/usb/mixer.c | 12 ++++++++++--
 sound/usb/mixer.h |  2 ++
 2 files changed, 12 insertions(+), 2 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16527
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-10-10
Linus Commit: 124751d5e63c823092060074bd0abaae61aaa9c4
Linus Tag: 4.14
Stable Date: 2017-10-18
Stable Commit: dc7c3bd09c7d2063c4d1be23d72ee85f1b3bb947
Stable Tag: 4.4.93

CVE-2017-16528:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit fc27fe7e8deef2f37cba3f2be2d52b6ca5eb9d57
Author: Takashi Iwai <tiwai@suse.de>
Date:   Tue Sep 12 12:41:20 2017 +0200

    ALSA: seq: Cancel pending autoload work at unbinding device
    
    ALSA sequencer core has a mechanism to load the enumerated devices
    automatically, and it's performed in an off-load work.  This seems
    causing some race when a sequencer is removed while the pending
    autoload work is running.  As syzkaller spotted, it may lead to some
    use-after-free:
      BUG: KASAN: use-after-free in snd_rawmidi_dev_seq_free+0x69/0x70
      sound/core/rawmidi.c:1617
      Write of size 8 at addr ffff88006c611d90 by task kworker/2:1/567
    
      CPU: 2 PID: 567 Comm: kworker/2:1 Not tainted 4.13.0+ #29
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      Workqueue: events autoload_drivers
      Call Trace:
       __dump_stack lib/dump_stack.c:16 [inline]
       dump_stack+0x192/0x22c lib/dump_stack.c:52
       print_address_description+0x78/0x280 mm/kasan/report.c:252
       kasan_report_error mm/kasan/report.c:351 [inline]
       kasan_report+0x230/0x340 mm/kasan/report.c:409
       __asan_report_store8_noabort+0x1c/0x20 mm/kasan/report.c:435
       snd_rawmidi_dev_seq_free+0x69/0x70 sound/core/rawmidi.c:1617
       snd_seq_dev_release+0x4f/0x70 sound/core/seq_device.c:192
       device_release+0x13f/0x210 drivers/base/core.c:814
       kobject_cleanup lib/kobject.c:648 [inline]
       kobject_release lib/kobject.c:677 [inline]
       kref_put include/linux/kref.h:70 [inline]
       kobject_put+0x145/0x240 lib/kobject.c:694
       put_device+0x25/0x30 drivers/base/core.c:1799
       klist_devices_put+0x36/0x40 drivers/base/bus.c:827
       klist_next+0x264/0x4a0 lib/klist.c:403
       next_device drivers/base/bus.c:270 [inline]
       bus_for_each_dev+0x17e/0x210 drivers/base/bus.c:312
       autoload_drivers+0x3b/0x50 sound/core/seq_device.c:117
       process_one_work+0x9fb/0x1570 kernel/workqueue.c:2097
       worker_thread+0x1e4/0x1350 kernel/workqueue.c:2231
       kthread+0x324/0x3f0 kernel/kthread.c:231
       ret_from_fork+0x25/0x30 arch/x86/entry/entry_64.S:425
    
    The fix is simply to assure canceling the autoload work at removing
    the device.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

 sound/core/seq_device.c | 3 +++
 1 file changed, 3 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16528
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-09-12
Linus Commit: fc27fe7e8deef2f37cba3f2be2d52b6ca5eb9d57
Linus Tag: 4.14
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-16529:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.92.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit bfc81a8bc18e3c4ba0cbaa7666ff76be2f998991
Author: Takashi Iwai <tiwai@suse.de>
Date:   Fri Sep 22 16:18:53 2017 +0200

    ALSA: usb-audio: Check out-of-bounds access by corrupted buffer descriptor
    
    When a USB-audio device receives a maliciously adjusted or corrupted
    buffer descriptor, the USB-audio driver may access an out-of-bounce
    value at its parser.  This was detected by syzkaller, something like:
    
      BUG: KASAN: slab-out-of-bounds in usb_audio_probe+0x27b2/0x2ab0
      Read of size 1 at addr ffff88006b83a9e8 by task kworker/0:1/24
      CPU: 0 PID: 24 Comm: kworker/0:1 Not tainted 4.14.0-rc1-42251-gebb2c2437d80 #224
      Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
      Workqueue: usb_hub_wq hub_event
      Call Trace:
       __dump_stack lib/dump_stack.c:16
       dump_stack+0x292/0x395 lib/dump_stack.c:52
       print_address_description+0x78/0x280 mm/kasan/report.c:252
       kasan_report_error mm/kasan/report.c:351
       kasan_report+0x22f/0x340 mm/kasan/report.c:409
       __asan_report_load1_noabort+0x19/0x20 mm/kasan/report.c:427
       snd_usb_create_streams sound/usb/card.c:248
       usb_audio_probe+0x27b2/0x2ab0 sound/usb/card.c:605
       usb_probe_interface+0x35d/0x8e0 drivers/usb/core/driver.c:361
       really_probe drivers/base/dd.c:413
       driver_probe_device+0x610/0xa00 drivers/base/dd.c:557
       __device_attach_driver+0x230/0x290 drivers/base/dd.c:653
       bus_for_each_drv+0x161/0x210 drivers/base/bus.c:463
       __device_attach+0x26e/0x3d0 drivers/base/dd.c:710
       device_initial_probe+0x1f/0x30 drivers/base/dd.c:757
       bus_probe_device+0x1eb/0x290 drivers/base/bus.c:523
       device_add+0xd0b/0x1660 drivers/base/core.c:1835
       usb_set_configuration+0x104e/0x1870 drivers/usb/core/message.c:1932
       generic_probe+0x73/0xe0 drivers/usb/core/generic.c:174
       usb_probe_device+0xaf/0xe0 drivers/usb/core/driver.c:266
       really_probe drivers/base/dd.c:413
       driver_probe_device+0x610/0xa00 drivers/base/dd.c:557
       __device_attach_driver+0x230/0x290 drivers/base/dd.c:653
       bus_for_each_drv+0x161/0x210 drivers/base/bus.c:463
       __device_attach+0x26e/0x3d0 drivers/base/dd.c:710
       device_initial_probe+0x1f/0x30 drivers/base/dd.c:757
       bus_probe_device+0x1eb/0x290 drivers/base/bus.c:523
       device_add+0xd0b/0x1660 drivers/base/core.c:1835
       usb_new_device+0x7b8/0x1020 drivers/usb/core/hub.c:2457
       hub_port_connect drivers/usb/core/hub.c:4903
       hub_port_connect_change drivers/usb/core/hub.c:5009
       port_event drivers/usb/core/hub.c:5115
       hub_event+0x194d/0x3740 drivers/usb/core/hub.c:5195
       process_one_work+0xc7f/0x1db0 kernel/workqueue.c:2119
       worker_thread+0x221/0x1850 kernel/workqueue.c:2253
       kthread+0x3a1/0x470 kernel/kthread.c:231
       ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:431
    
    This patch adds the checks of out-of-bounce accesses at appropriate
    places and bails out when it goes out of the given buffer.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Takashi Iwai <tiwai@suse.de>

 sound/usb/card.c | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16529
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-09-22
Linus Commit: bfc81a8bc18e3c4ba0cbaa7666ff76be2f998991
Linus Tag: 4.14
Stable Date: 2017-10-12
Stable Commit: 46c7b1fa4911a859a82575e3ffb55b34a89a222d
Stable Tag: 4.4.92

CVE-2017-16530:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.92.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 786de92b3cb26012d3d0f00ee37adf14527f35c4
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Sep 22 11:56:49 2017 -0400

    USB: uas: fix bug in handling of alternate settings
    
    The uas driver has a subtle bug in the way it handles alternate
    settings.  The uas_find_uas_alt_setting() routine returns an
    altsetting value (the bAlternateSetting number in the descriptor), but
    uas_use_uas_driver() then treats that value as an index to the
    intf->altsetting array, which it isn't.
    
    Normally this doesn't cause any problems because the various
    alternate settings have bAlternateSetting values 0, 1, 2, ..., so the
    value is equal to the index in the array.  But this is not guaranteed,
    and Andrey Konovalov used the syzkaller fuzzer with KASAN to get a
    slab-out-of-bounds error by violating this assumption.
    
    This patch fixes the bug by making uas_find_uas_alt_setting() return a
    pointer to the altsetting entry rather than either the value or the
    index.  Pointers are less subject to misinterpretation.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    CC: Oliver Neukum <oneukum@suse.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

 drivers/usb/storage/uas-detect.h | 15 ++++++++-------
 drivers/usb/storage/uas.c        | 10 +++++-----
 2 files changed, 13 insertions(+), 12 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16530
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-09-22
Linus Commit: 786de92b3cb26012d3d0f00ee37adf14527f35c4
Linus Tag: 4.14
Stable Date: 2017-10-12
Stable Commit: 5d9a9c3dcc1f63215b5a5b877be589974ec4f31d
Stable Tag: 4.4.92

CVE-2017-16531:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.92.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit bd7a3fe770ebd8391d1c7d072ff88e9e76d063eb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Tue Sep 19 15:07:17 2017 +0200

    USB: fix out-of-bounds in usb_set_configuration
    
    Andrey Konovalov reported a possible out-of-bounds problem for a USB interface
    association descriptor.  He writes:
    	It seems there's no proper size check of a USB_DT_INTERFACE_ASSOCIATION
    	descriptor. It's only checked that the size is >= 2 in
    	usb_parse_configuration(), so find_iad() might do out-of-bounds access
    	to intf_assoc->bInterfaceCount.
    
    And he's right, we don't check for crazy descriptors of this type very well, so
    resolve this problem.  Yet another issue found by syzkaller...
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

 drivers/usb/core/config.c    | 14 +++++++++++---
 include/uapi/linux/usb/ch9.h |  1 +
 2 files changed, 12 insertions(+), 3 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16531
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-09-19
Linus Commit: bd7a3fe770ebd8391d1c7d072ff88e9e76d063eb
Linus Tag: 4.14
Stable Date: 2017-10-12
Stable Commit: 13713e63bdb306f9a58d359b15edd60f34eac5ee
Stable Tag: 4.4.92

CVE-2017-16532:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 7c80f9e4a588f1925b07134bb2e3689335f6c6d8
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Fri Sep 29 10:54:24 2017 -0400

    usb: usbtest: fix NULL pointer dereference
    
    If the usbtest driver encounters a device with an IN bulk endpoint but
    no OUT bulk endpoint, it will try to dereference a NULL pointer
    (out->desc.bEndpointAddress).  The problem can be solved by adding a
    missing test.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Felipe Balbi <felipe.balbi@linux.intel.com>

 drivers/usb/misc/usbtest.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16532
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-10-11
Linus Commit: 7c80f9e4a588f1925b07134bb2e3689335f6c6d8
Linus Tag: 4.14
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-16533:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.93.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit f043bfc98c193c284e2cd768fefabe18ac2fed9b
Author: Jaejoong Kim <climbbb.kim@gmail.com>
Date:   Thu Sep 28 19:16:30 2017 +0900

    HID: usbhid: fix out-of-bounds bug
    
    The hid descriptor identifies the length and type of subordinate
    descriptors for a device. If the received hid descriptor is smaller than
    the size of the struct hid_descriptor, it is possible to cause
    out-of-bounds.
    
    In addition, if bNumDescriptors of the hid descriptor have an incorrect
    value, this can also cause out-of-bounds while approaching hdesc->desc[n].
    
    So check the size of hid descriptor and bNumDescriptors.
    
    	BUG: KASAN: slab-out-of-bounds in usbhid_parse+0x9b1/0xa20
    	Read of size 1 at addr ffff88006c5f8edf by task kworker/1:2/1261
    
    	CPU: 1 PID: 1261 Comm: kworker/1:2 Not tainted
    	4.14.0-rc1-42251-gebb2c2437d80 #169
    	Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    	Workqueue: usb_hub_wq hub_event
    	Call Trace:
    	__dump_stack lib/dump_stack.c:16
    	dump_stack+0x292/0x395 lib/dump_stack.c:52
    	print_address_description+0x78/0x280 mm/kasan/report.c:252
    	kasan_report_error mm/kasan/report.c:351
    	kasan_report+0x22f/0x340 mm/kasan/report.c:409
    	__asan_report_load1_noabort+0x19/0x20 mm/kasan/report.c:427
    	usbhid_parse+0x9b1/0xa20 drivers/hid/usbhid/hid-core.c:1004
    	hid_add_device+0x16b/0xb30 drivers/hid/hid-core.c:2944
    	usbhid_probe+0xc28/0x1100 drivers/hid/usbhid/hid-core.c:1369
    	usb_probe_interface+0x35d/0x8e0 drivers/usb/core/driver.c:361
    	really_probe drivers/base/dd.c:413
    	driver_probe_device+0x610/0xa00 drivers/base/dd.c:557
    	__device_attach_driver+0x230/0x290 drivers/base/dd.c:653
    	bus_for_each_drv+0x161/0x210 drivers/base/bus.c:463
    	__device_attach+0x26e/0x3d0 drivers/base/dd.c:710
    	device_initial_probe+0x1f/0x30 drivers/base/dd.c:757
    	bus_probe_device+0x1eb/0x290 drivers/base/bus.c:523
    	device_add+0xd0b/0x1660 drivers/base/core.c:1835
    	usb_set_configuration+0x104e/0x1870 drivers/usb/core/message.c:1932
    	generic_probe+0x73/0xe0 drivers/usb/core/generic.c:174
    	usb_probe_device+0xaf/0xe0 drivers/usb/core/driver.c:266
    	really_probe drivers/base/dd.c:413
    	driver_probe_device+0x610/0xa00 drivers/base/dd.c:557
    	__device_attach_driver+0x230/0x290 drivers/base/dd.c:653
    	bus_for_each_drv+0x161/0x210 drivers/base/bus.c:463
    	__device_attach+0x26e/0x3d0 drivers/base/dd.c:710
    	device_initial_probe+0x1f/0x30 drivers/base/dd.c:757
    	bus_probe_device+0x1eb/0x290 drivers/base/bus.c:523
    	device_add+0xd0b/0x1660 drivers/base/core.c:1835
    	usb_new_device+0x7b8/0x1020 drivers/usb/core/hub.c:2457
    	hub_port_connect drivers/usb/core/hub.c:4903
    	hub_port_connect_change drivers/usb/core/hub.c:5009
    	port_event drivers/usb/core/hub.c:5115
    	hub_event+0x194d/0x3740 drivers/usb/core/hub.c:5195
    	process_one_work+0xc7f/0x1db0 kernel/workqueue.c:2119
    	worker_thread+0x221/0x1850 kernel/workqueue.c:2253
    	kthread+0x3a1/0x470 kernel/kthread.c:231
    	ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:431
    
    Cc: stable@vger.kernel.org
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Jaejoong Kim <climbbb.kim@gmail.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Acked-by: Alan Stern <stern@rowland.harvard.edu>
    Signed-off-by: Jiri Kosina <jkosina@suse.cz>

 drivers/hid/usbhid/hid-core.c | 12 +++++++++++-
 1 file changed, 11 insertions(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16533
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-10-11
Linus Commit: f043bfc98c193c284e2cd768fefabe18ac2fed9b
Linus Tag: 4.14
Stable Date: 2017-10-18
Stable Commit: 2929cb995378205bceda86d6fd3cbc22e522f97f
Stable Tag: 4.4.93

CVE-2017-16534:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.92.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 2e1c42391ff2556387b3cb6308b24f6f65619feb
Author: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Date:   Thu Sep 21 16:58:48 2017 +0200

    USB: core: harden cdc_parse_cdc_header
    
    Andrey Konovalov reported a possible out-of-bounds problem for the
    cdc_parse_cdc_header function.  He writes:
    	It looks like cdc_parse_cdc_header() doesn't validate buflen
    	before accessing buffer[1], buffer[2] and so on. The only check
    	present is while (buflen > 0).
    
    So fix this issue up by properly validating the buffer length matches
    what the descriptor says it is.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

 drivers/usb/core/message.c | 4 ++++
 1 file changed, 4 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16534
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-09-21
Linus Commit: 2e1c42391ff2556387b3cb6308b24f6f65619feb
Linus Tag: 4.14
Stable Date: 2017-10-12
Stable Commit: feab51a916ed07219dee38b898fe22bd2a98193a
Stable Tag: 4.4.92

CVE-2017-16535:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.95.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 1c0edc3633b56000e18d82fc241e3995ca18a69e
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Wed Oct 18 12:49:38 2017 -0400

    USB: core: fix out-of-bounds access bug in usb_get_bos_descriptor()
    
    Andrey used the syzkaller fuzzer to find an out-of-bounds memory
    access in usb_get_bos_descriptor().  The code wasn't checking that the
    next usb_dev_cap_header structure could fit into the remaining buffer
    space.
    
    This patch fixes the error and also reduces the bNumDeviceCaps field
    in the header to match the actual number of capabilities found, in
    cases where there are fewer than expected.
    
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Tested-by: Andrey Konovalov <andreyknvl@google.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

 drivers/usb/core/config.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-11-03
CVE: CVE-2017-16535
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-10-18
Linus Commit: 1c0edc3633b56000e18d82fc241e3995ca18a69e
Linus Tag: 4.14
Stable Date: 2017-10-27
Stable Commit: 9dff499d822660c6dbb2a407a7d85be26f87da07
Stable Tag: 4.4.95
