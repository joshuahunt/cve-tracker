
-----------------------------
Stable Kernel Security Notice
2018-05-09

Stable Branch: linux-4.14.y

All linux-4.14.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.14.y-stable-cve-list.html

CVE(s) in report:

CVE-2018-1087
CVE-2018-8897
-----------------------------

Details:

*************
CVE-2018-1087:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.14.31.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 32d43cd391bacb5f0814c2624399a5dad3501d09
Author: Linus Torvalds <torvalds@linux-foundation.org>
Date:   Tue Mar 20 12:16:59 2018 -0700

    kvm/x86: fix icebp instruction handling
    
    The undocumented 'icebp' instruction (aka 'int1') works pretty much like
    'int3' in the absense of in-circuit probing equipment (except,
    obviously, that it raises #DB instead of raising #BP), and is used by
    some validation test-suites as such.
    
    But Andy Lutomirski noticed that his test suite acted differently in kvm
    than on bare hardware.
    
    The reason is that kvm used an inexact test for the icebp instruction:
    it just assumed that an all-zero VM exit qualification value meant that
    the VM exit was due to icebp.
    
    That is not unlike the guess that do_debug() does for the actual
    exception handling case, but it's purely a heuristic, not an absolute
    rule.  do_debug() does it because it wants to ascribe _some_ reasons to
    the #DB that happened, and an empty %dr6 value means that 'icebp' is the
    most likely casue and we have no better information.
    
    But kvm can just do it right, because unlike the do_debug() case, kvm
    actually sees the real reason for the #DB in the VM-exit interruption
    information field.
    
    So instead of relying on an inexact heuristic, just use the actual VM
    exit information that says "it was 'icebp'".
    
    Right now the 'icebp' instruction isn't technically documented by Intel,
    but that will hopefully change.  The special "privileged software
    exception" information _is_ actually mentioned in the Intel SDM, even
    though the cause of it isn't enumerated.
    
    Reported-by: Andy Lutomirski <luto@kernel.org>
    Tested-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 arch/x86/include/asm/vmx.h | 1 +
 arch/x86/kvm/vmx.c         | 9 ++++++++-
 2 files changed, 9 insertions(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-05-08
CVE: CVE-2018-1087
Break Date: 2009-03-24
Break Commit: 42dbaa5a057736bf8b5c22aa42dbe975bf1080e5
Break Tag: 2.6
Linus Fix Date: 2018-03-20
Linus Commit: 32d43cd391bacb5f0814c2624399a5dad3501d09
Linus Tag: 4.16-rc7
Stable Date: 2018-03-28
Stable Commit: 06b2810150542cfe0e66407c77ea2de6790e35dc
Stable Tag: 4.14.31

CVE-2018-8897:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.14.31.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit d8ba61ba58c88d5207c1ba2f7d9a2280e7d03be9
Author: Andy Lutomirski <luto@kernel.org>
Date:   Thu Jul 23 15:37:48 2015 -0700

    x86/entry/64: Don't use IST entry for #BP stack
    
    There's nothing IST-worthy about #BP/int3.  We don't allow kprobes
    in the small handful of places in the kernel that run at CPL0 with
    an invalid stack, and 32-bit kernels have used normal interrupt
    gates for #BP forever.
    
    Furthermore, we don't allow kprobes in places that have usergs while
    in kernel mode, so "paranoid" is also unnecessary.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Cc: stable@vger.kernel.org

 arch/x86/entry/entry_64.S |  2 +-
 arch/x86/kernel/idt.c     |  2 --
 arch/x86/kernel/traps.c   | 15 ++++++++-------
 3 files changed, 9 insertions(+), 10 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-05-08
CVE: CVE-2018-8897
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2018-03-23
Linus Commit: d8ba61ba58c88d5207c1ba2f7d9a2280e7d03be9
Linus Tag: 4.16-rc7
Stable Date: 2018-03-28
Stable Commit: 5a29ce2b9880a26e1ac95169dedabc988360c734
Stable Tag: 4.14.31
