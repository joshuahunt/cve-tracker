
-----------------------------
Stable Kernel Security Notice
2016-11-30

Stable Branch: linux-4.1.y

All linux-4.1.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.1.y-stable-cve-list.html

CVE(s) in report:

CVE-2016-9313
CVE-2016-9644
-----------------------------

Details:

*************
CVE-2016-9313:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 7df3e59c3d1df4f87fe874c7956ef7a3d2f4d5fb
Author: David Howells <dhowells@redhat.com>
Date:   Wed Oct 26 15:02:01 2016 +0100

    KEYS: Sort out big_key initialisation
    
    big_key has two separate initialisation functions, one that registers the
    key type and one that registers the crypto.  If the key type fails to
    register, there's no problem if the crypto registers successfully because
    there's no way to reach the crypto except through the key type.
    
    However, if the key type registers successfully but the crypto does not,
    big_key_rng and big_key_blkcipher may end up set to NULL - but the code
    neither checks for this nor unregisters the big key key type.
    
    Furthermore, since the key type is registered before the crypto, it is
    theoretically possible for the kernel to try adding a big_key before the
    crypto is set up, leading to the same effect.
    
    Fix this by merging big_key_crypto_init() and big_key_init() and calling
    the resulting function late.  If they're going to be encrypted, we
    shouldn't be creating big_keys before we have the facilities to do the
    encryption available.  The key type registration is also moved after the
    crypto initialisation.
    
    The fix also includes message printing on failure.
    
    If the big_key type isn't correctly set up, simply doing:
    
    	dd if=/dev/zero bs=4096 count=1 | keyctl padd big_key a @s
    
    ought to cause an oops.
    
    Fixes: 13100a72f40f5748a04017e0ab3df4cf27c809ef ('Security: Keys: Big keys stored encrypted')
    Signed-off-by: David Howells <dhowells@redhat.com>
    cc: Peter Hlavaty <zer0mem@yahoo.com>
    cc: Kirill Marinushkin <k.marinushkin@gmail.com>
    cc: Artem Savkov <asavkov@redhat.com>
    cc: stable@vger.kernel.org
    Signed-off-by: James Morris <james.l.morris@oracle.com>

 security/keys/big_key.c |   59 +++++++++++++++++++++++++----------------------
 1 file changed, 32 insertions(+), 27 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-11-27
CVE: CVE-2016-9313
Break Date: 2016-04-12
Break Commit: 13100a72f40f5748a04017e0ab3df4cf27c809ef
Break Tag: 4.7
Linus Fix Date: 2016-10-27
Linus Commit: 7df3e59c3d1df4f87fe874c7956ef7a3d2f4d5fb
Linus Tag: 4.9
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2016-9644:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 548acf19234dbda5a52d5a8e7e205af46e9da840
Author: Tony Luck <tony.luck@intel.com>
Date:   Wed Feb 17 10:20:12 2016 -0800

    x86/mm: Expand the exception table logic to allow new handling options
    
    Huge amounts of help from  Andy Lutomirski and Borislav Petkov to
    produce this. Andy provided the inspiration to add classes to the
    exception table with a clever bit-squeezing trick, Boris pointed
    out how much cleaner it would all be if we just had a new field.
    
    Linus Torvalds blessed the expansion with:
    
      ' I'd rather not be clever in order to save just a tiny amount of space
        in the exception table, which isn't really criticial for anybody. '
    
    The third field is another relative function pointer, this one to a
    handler that executes the actions.
    
    We start out with three handlers:
    
     1: Legacy - just jumps the to fixup IP
     2: Fault - provide the trap number in %ax to the fixup code
     3: Cleaned up legacy for the uaccess error hack
    
    Signed-off-by: Tony Luck <tony.luck@intel.com>
    Reviewed-by: Borislav Petkov <bp@suse.de>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Link: http://lkml.kernel.org/r/f6af78fcbd348cf4939875cfda9c19689b5e50b8.1455732970.git.tony.luck@intel.com
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

 Documentation/x86/exception-tables.txt |   35 +++++++++++
 arch/x86/include/asm/asm.h             |   40 ++++++++-----
 arch/x86/include/asm/uaccess.h         |   16 ++---
 arch/x86/kernel/kprobes/core.c         |    2 +-
 arch/x86/kernel/traps.c                |    6 +-
 arch/x86/mm/extable.c                  |  100 +++++++++++++++++++++++---------
 arch/x86/mm/fault.c                    |    2 +-
 scripts/sortextable.c                  |   32 ++++++++++
 8 files changed, 176 insertions(+), 57 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-11-27
CVE: CVE-2016-9644
Break Date: 2016-09-15
Break Commit: 1c109fabbd51863475cd12ac206bdd249aee35af
Break Tag: 4.8
Linus Fix Date: 2016-02-18
Linus Commit: 548acf19234dbda5a52d5a8e7e205af46e9da840
Linus Tag: 4.6
Stable Date: -
Stable Commit: -
Stable Tag: -
