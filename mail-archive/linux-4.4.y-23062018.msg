
-----------------------------
Stable Kernel Security Notice
2018-06-23

Stable Branch: linux-4.4.y

All linux-4.4.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.4.y-stable-cve-list.html

CVE(s) in report:

CVE-2018-1118
CVE-2018-11412
CVE-2018-12633
CVE-2018-3665
-----------------------------

Details:

*************
CVE-2018-1118:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 670ae9caaca467ea1bfd325cb2a5c98ba87f94ad
Author: Michael S. Tsirkin <mst@redhat.com>
Date:   Sat May 12 00:33:10 2018 +0300

    vhost: fix info leak due to uninitialized memory
    
    struct vhost_msg within struct vhost_msg_node is copied to userspace.
    Unfortunately it turns out on 64 bit systems vhost_msg has padding after
    type which gcc doesn't initialize, leaking 4 uninitialized bytes to
    userspace.
    
    This padding also unfortunately means 32 bit users of this interface are
    broken on a 64 bit kernel which will need to be fixed separately.
    
    Fixes: CVE-2018-1118
    Cc: stable@vger.kernel.org
    Reported-by: Kevin Easton <kevin@guarana.org>
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
    Reported-by: syzbot+87cfa083e727a224754b@syzkaller.appspotmail.com
    Signed-off-by: Michael S. Tsirkin <mst@redhat.com>

 drivers/vhost/vhost.c | 3 +++
 1 file changed, 3 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-05-10
CVE: CVE-2018-1118
Break Date: 2016-08-02
Break Commit: 6b1e6cc7855b09a0a9bfa1d9f30172ba366f161c
Break Tag: 4.8-rc1
Linus Fix Date: 2018-06-12
Linus Commit: 670ae9caaca467ea1bfd325cb2a5c98ba87f94ad
Linus Tag: 4.18-rc1
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2018-11412:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 117166efb1ee8f13c38f9e96b258f16d4923f888
Author: Theodore Ts'o <tytso@mit.edu>
Date:   Tue May 22 16:15:24 2018 -0400

    ext4: do not allow external inodes for inline data
    
    The inline data feature was implemented before we added support for
    external inodes for xattrs.  It makes no sense to support that
    combination, but the problem is that there are a number of extended
    attribute checks that are skipped if e_value_inum is non-zero.
    
    Unfortunately, the inline data code is completely e_value_inum
    unaware, and attempts to interpret the xattr fields as if it were an
    inline xattr --- at which point, Hilarty Ensues.
    
    This addresses CVE-2018-11412.
    
    https://bugzilla.kernel.org/show_bug.cgi?id=199803
    
    Reported-by: Jann Horn <jannh@google.com>
    Reviewed-by: Andreas Dilger <adilger@dilger.ca>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>
    Fixes: e50e5129f384 ("ext4: xattr-in-inode support")
    Cc: stable@kernel.org

 fs/ext4/inline.c | 6 ++++++
 1 file changed, 6 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-05-24
CVE: CVE-2018-11412
Break Date: 2017-06-21
Break Commit: e50e5129f384ae282adebfb561189cdb19b81cee
Break Tag: 4.13-rc1
Linus Fix Date: 2018-05-22
Linus Commit: 117166efb1ee8f13c38f9e96b258f16d4923f888
Linus Tag: 4.18-rc1
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2018-12633:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit bd23a7269834dc7c1f93e83535d16ebc44b75eba
Author: Wenwen Wang <wang6495@umn.edu>
Date:   Tue May 8 08:50:28 2018 -0500

    virt: vbox: Only copy_from_user the request-header once
    
    In vbg_misc_device_ioctl(), the header of the ioctl argument is copied from
    the userspace pointer 'arg' and saved to the kernel object 'hdr'. Then the
    'version', 'size_in', and 'size_out' fields of 'hdr' are verified.
    
    Before this commit, after the checks a buffer for the entire request would
    be allocated and then all data including the verified header would be
    copied from the userspace 'arg' pointer again.
    
    Given that the 'arg' pointer resides in userspace, a malicious userspace
    process can race to change the data pointed to by 'arg' between the two
    copies. By doing so, the user can bypass the verifications on the ioctl
    argument.
    
    This commit fixes this by using the already checked copy of the header
    to fill the header part of the allocated buffer and only copying the
    remainder of the data from userspace.
    
    Signed-off-by: Wenwen Wang <wang6495@umn.edu>
    Reviewed-by: Hans de Goede <hdegoede@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

 drivers/virt/vboxguest/vboxguest_linux.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-06-21
CVE: CVE-2018-12633
Break Date: 2017-12-18
Break Commit: 0ba002bc4393dcfae031fc707b11c094b46a5048
Break Tag: 4.16-rc1
Linus Fix Date: 2018-05-14
Linus Commit: bd23a7269834dc7c1f93e83535d16ebc44b75eba
Linus Tag: 4.18-rc1
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2018-3665:
*************

This CVE has been resolved in 4.4.138.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 58122bf1d856a4ea9581d62a07c557d997d46a19
Author: Andy Lutomirski <luto@kernel.org>
Date:   Sun Jan 24 14:38:10 2016 -0800

    x86/fpu: Default eagerfpu=on on all CPUs
    
    We have eager and lazy FPU modes, introduced in:
    
      304bceda6a18 ("x86, fpu: use non-lazy fpu restore for processors supporting xsave")
    
    The result is rather messy.  There are two code paths in almost all
    of the FPU code, and only one of them (the eager case) is tested
    frequently, since most kernel developers have new enough hardware
    that we use eagerfpu.
    
    It seems that, on any remotely recent hardware, eagerfpu is a win:
    glibc uses SSE2, so laziness is probably overoptimistic, and, in any
    case, manipulating TS is far slower that saving and restoring the
    full state.  (Stores to CR0.TS are serializing and are poorly
    optimized.)
    
    To try to shake out any latent issues on old hardware, this changes
    the default to eager on all CPUs.  If no performance or functionality
    problems show up, a subsequent patch could remove lazy mode entirely.
    
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Cc: Andy Lutomirski <luto@amacapital.net>
    Cc: Borislav Petkov <bp@alien8.de>
    Cc: Dave Hansen <dave.hansen@linux.intel.com>
    Cc: Fenghua Yu <fenghua.yu@intel.com>
    Cc: H. Peter Anvin <hpa@zytor.com>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Cc: Oleg Nesterov <oleg@redhat.com>
    Cc: Peter Zijlstra <peterz@infradead.org>
    Cc: Quentin Casasnovas <quentin.casasnovas@oracle.com>
    Cc: Rik van Riel <riel@redhat.com>
    Cc: Sai Praneeth Prakhya <sai.praneeth.prakhya@intel.com>
    Cc: Thomas Gleixner <tglx@linutronix.de>
    Cc: yu-cheng yu <yu-cheng.yu@intel.com>
    Link: http://lkml.kernel.org/r/ac290de61bf08d9cfc2664a4f5080257ffc1075a.1453675014.git.luto@kernel.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

 arch/x86/kernel/fpu/init.c | 13 +++++--------
 1 file changed, 5 insertions(+), 8 deletions(-)
---
The following fields have changed: Public Date
Public Date: 2018-06-13 -> 2018-06-21
