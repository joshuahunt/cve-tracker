
-----------------------------
Stable Kernel Security Notice
2016-04-20

Stable Branch: linux-3.10.y

All linux-3.10.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-3.10.y-stable-cve-list.html

CVE(s) in report:

CVE-2015-8830
CVE-2016-0774
CVE-2016-2053
-----------------------------

Details:

*************
CVE-2015-8830:
*************

---
Description of fix for this vulnerability:
commit 4c185ce06dca14f5cea192f5a2c981ef50663f2b
Author: Al Viro <viro@zeniv.linux.org.uk>
Date:   Fri Mar 20 20:17:32 2015 -0400

    aio: lift iov_iter_init() into aio_setup_..._rw()
    
    the only non-trivial detail is that we do it before rw_verify_area(),
    so we'd better cap the length ourselves in aio_setup_single_rw()
    case (for vectored case rw_copy_check_uvector() will do that for us).
    
    Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>

 fs/aio.c |   17 +++++++++++------
 1 file changed, 11 insertions(+), 6 deletions(-)
---
The following fields have changed: Break Date,Break Commit,Break Tag
Break Date: - -> 2013-05-07
Break Commit: - -> 41ef4eb8eef8d06bc1399e7b00c940d771554711
Break Tag: - -> 3.10

CVE-2016-0774:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-03-30
CVE: CVE-2016-0774
Break Date: -
Break Commit: local-2016-0774-break
Break Tag: -
Linus Fix Date: -
Linus Commit: local-2016-0774-fix
Linus Tag: -
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2016-2053:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 0d62e9dd6da45bbf0f33a8617afc5fe774c8f45f
Author: David Howells <dhowells@redhat.com>
Date:   Wed Aug 5 12:54:46 2015 +0100

    ASN.1: Fix non-match detection failure on data overrun
    
    If the ASN.1 decoder is asked to parse a sequence of objects, non-optional
    matches get skipped if there's no more data to be had rather than a
    data-overrun error being reported.
    
    This is due to the code segment that decides whether to skip optional
    matches (ie. matches that could get ignored because an element is marked
    OPTIONAL in the grammar) due to a lack of data also skips non-optional
    elements if the data pointer has reached the end of the buffer.
    
    This can be tested with the data decoder for the new RSA akcipher algorithm
    that takes three non-optional integers.  Currently, it skips the last
    integer if there is insufficient data.
    
    Without the fix, #defining DEBUG in asn1_decoder.c will show something
    like:
    
    	next_op: pc=0/13 dp=0/270 C=0 J=0
    	- match? 30 30 00
    	- TAG: 30 266 CONS
    	next_op: pc=2/13 dp=4/270 C=1 J=0
    	- match? 02 02 00
    	- TAG: 02 257
    	- LEAF: 257
    	next_op: pc=5/13 dp=265/270 C=1 J=0
    	- match? 02 02 00
    	- TAG: 02 3
    	- LEAF: 3
    	next_op: pc=8/13 dp=270/270 C=1 J=0
    	next_op: pc=11/13 dp=270/270 C=1 J=0
    	- end cons t=4 dp=270 l=270/270
    
    The next_op line for pc=8/13 should be followed by a match line.
    
    This is not exploitable for X.509 certificates by means of shortening the
    message and fixing up the ASN.1 CONS tags because:
    
     (1) The relevant records being built up are cleared before use.
    
     (2) If the message is shortened sufficiently to remove the public key, the
         ASN.1 parse of the RSA key will fail quickly due to a lack of data.
    
     (3) Extracted signature data is either turned into MPIs (which cope with a
         0 length) or is simpler integers specifying algoritms and suchlike
         (which can validly be 0); and
    
     (4) The AKID and SKID extensions are optional and their removal is handled
         without risking passing a NULL to asymmetric_key_generate_id().
    
     (5) If the certificate is truncated sufficiently to remove the subject,
         issuer or serialNumber then the ASN.1 decoder will fail with a 'Cons
         stack underflow' return.
    
    This is not exploitable for PKCS#7 messages by means of removal of elements
    from such a message from the tail end of a sequence:
    
     (1) Any shortened X.509 certs embedded in the PKCS#7 message are survivable
         as detailed above.
    
     (2) The message digest content isn't used if it shows a NULL pointer,
         similarly, the authattrs aren't used if that shows a NULL pointer.
    
     (3) A missing signature results in a NULL MPI - which the MPI routines deal
         with.
    
     (4) If data is NULL, it is expected that the message has detached content and
         that is handled appropriately.
    
     (5) If the serialNumber is excised, the unconditional action associated
         with it will pick up the containing SEQUENCE instead, so no NULL
         pointer will be seen here.
    
         If both the issuer and the serialNumber are excised, the ASN.1 decode
         will fail with an 'Unexpected tag' return.
    
         In either case, there's no way to get to asymmetric_key_generate_id()
         with a NULL pointer.
    
     (6) Other fields are decoded to simple integers.  Shortening the message
         to omit an algorithm ID field will cause checks on this to fail early
         in the verification process.
    
    
    This can also be tested by snipping objects off of the end of the ASN.1 stream
    such that mandatory tags are removed - or even from the end of internal
    SEQUENCEs.  If any mandatory tag is missing, the error EBADMSG *should* be
    produced.  Without this patch ERANGE or ENOPKG might be produced or the parse
    may apparently succeed, perhaps with ENOKEY or EKEYREJECTED being produced
    later, depending on what gets snipped.
    
    Just snipping off the final BIT_STRING or OCTET_STRING from either sample
    should be a start since both are mandatory and neither will cause an EBADMSG
    without the patches
    
    Reported-by: Marcel Holtmann <marcel@holtmann.org>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Tested-by: Marcel Holtmann <marcel@holtmann.org>
    Reviewed-by: David Woodhouse <David.Woodhouse@intel.com>

 lib/asn1_decoder.c |    5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-01-26
CVE: CVE-2016-2053
Break Date: 2013-09-25
Break Commit: 3d167d68e3805ee45ed2e8412fc03ed919c54c24
Break Tag: 3.13
Linus Fix Date: 2015-08-05
Linus Commit: 0d62e9dd6da45bbf0f33a8617afc5fe774c8f45f
Linus Tag: 4.3
Stable Date: -
Stable Commit: -
Stable Tag: -
