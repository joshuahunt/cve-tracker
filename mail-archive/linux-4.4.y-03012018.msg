
-----------------------------
Stable Kernel Security Notice
2018-01-03

Stable Branch: linux-4.4.y

All linux-4.4.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.4.y-stable-cve-list.html

CVE(s) in report:

2018-01-02
2018-01-02
2018-01-02
2018-01-02
2018-01-02
2018-01-02
2018-01-02
2018-01-02
2018-01-02
2018-01-02
2018-01-02
2018-01-02
2018-01-02
CVE-2017-15127
CVE-2017-17449
CVE-2017-17558
CVE-2017-17712
CVE-2017-17741
CVE-2017-17863
CVE-2017-17864
-----------------------------

Details:

*************
CVE-2017-15127:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 5af10dfd0afc559bb4b0f7e3e8227a1578333995
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Thu Aug 10 15:23:38 2017 -0700

    userfaultfd: hugetlbfs: remove superfluous page unlock in VM_SHARED case
    
    huge_add_to_page_cache->add_to_page_cache implicitly unlocks the page
    before returning in case of errors.
    
    The error returned was -EEXIST by running UFFDIO_COPY on a non-hole
    offset of a VM_SHARED hugetlbfs mapping.  It was an userland bug that
    triggered it and the kernel must cope with it returning -EEXIST from
    ioctl(UFFDIO_COPY) as expected.
    
      page dumped because: VM_BUG_ON_PAGE(!PageLocked(page))
      kernel BUG at mm/filemap.c:964!
      invalid opcode: 0000 [#1] SMP
      CPU: 1 PID: 22582 Comm: qemu-system-x86 Not tainted 4.11.11-300.fc26.x86_64 #1
      RIP: unlock_page+0x4a/0x50
      Call Trace:
        hugetlb_mcopy_atomic_pte+0xc0/0x320
        mcopy_atomic+0x96f/0xbe0
        userfaultfd_ioctl+0x218/0xe90
        do_vfs_ioctl+0xa5/0x600
        SyS_ioctl+0x79/0x90
        entry_SYSCALL_64_fastpath+0x1a/0xa9
    
    Link: http://lkml.kernel.org/r/20170802165145.22628-2-aarcange@redhat.com
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Tested-by: Maxime Coquelin <maxime.coquelin@redhat.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Alexey Perevalov <a.perevalov@samsung.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 mm/hugetlb.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-12-18
CVE: CVE-2017-15127
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-08-10
Linus Commit: 5af10dfd0afc559bb4b0f7e3e8227a1578333995
Linus Tag: 4.13
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-17449:
*************

This CVE has been resolved in 4.4.109.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 93c647643b48f0131f02e45da3bd367d80443291
Author: Kevin Cernekee <cernekee@chromium.org>
Date:   Wed Dec 6 12:12:27 2017 -0800

    netlink: Add netns check on taps
    
    Currently, a nlmon link inside a child namespace can observe systemwide
    netlink activity.  Filter the traffic so that nlmon can only sniff
    netlink messages from its own netns.
    
    Test case:
    
        vpnns -- bash -c "ip link add nlmon0 type nlmon; \
                          ip link set nlmon0 up; \
                          tcpdump -i nlmon0 -q -w /tmp/nlmon.pcap -U" &
        sudo ip xfrm state add src 10.1.1.1 dst 10.1.1.2 proto esp \
            spi 0x1 mode transport \
            auth sha1 0x6162633132330000000000000000000000000000 \
            enc aes 0x00000000000000000000000000000000
        grep --binary abc123 /tmp/nlmon.pcap
    
    Signed-off-by: Kevin Cernekee <cernekee@chromium.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

 net/netlink/af_netlink.c | 3 +++
 1 file changed, 3 insertions(+)
---
The following fields have changed: Stable Date,Stable Commit,Stable Tag
Stable Date: - -> 2018-01-02
Stable Commit: - -> f778ce6faa0d4c8d7a90b7bd11c3db7fb687c8cc
Stable Tag: - -> 4.4.109

CVE-2017-17558:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.107.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 48a4ff1c7bb5a32d2e396b03132d20d552c0eca7
Author: Alan Stern <stern@rowland.harvard.edu>
Date:   Tue Dec 12 14:25:13 2017 -0500

    USB: core: prevent malicious bNumInterfaces overflow
    
    A malicious USB device with crafted descriptors can cause the kernel
    to access unallocated memory by setting the bNumInterfaces value too
    high in a configuration descriptor.  Although the value is adjusted
    during parsing, this adjustment is skipped in one of the error return
    paths.
    
    This patch prevents the problem by setting bNumInterfaces to 0
    initially.  The existing code already sets it to the proper value
    after parsing is complete.
    
    Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
    Reported-by: Andrey Konovalov <andreyknvl@google.com>
    CC: <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

 drivers/usb/core/config.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-12-12
CVE: CVE-2017-17558
Break Date: 2005-04-16
Break Commit: 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
Break Tag: 2.6
Linus Fix Date: 2017-12-13
Linus Commit: 48a4ff1c7bb5a32d2e396b03132d20d552c0eca7
Linus Tag: 4.15
Stable Date: 2017-12-20
Stable Commit: dfdf5fa3e6647c0fc02be8d857b6b8b7098946ff
Stable Tag: 4.4.107

CVE-2017-17712:
*************

This CVE has been resolved in 4.4.109.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 8f659a03a0ba9289b9aeb9b4470e6fb263d6f483
Author: Mohamed Ghannam <simo.ghannam@gmail.com>
Date:   Sun Dec 10 03:50:58 2017 +0000

    net: ipv4: fix for a race condition in raw_sendmsg
    
    inet->hdrincl is racy, and could lead to uninitialized stack pointer
    usage, so its value should be read only once.
    
    Fixes: c008ba5bdc9f ("ipv4: Avoid reading user iov twice after raw_probe_proto_opt")
    Signed-off-by: Mohamed Ghannam <simo.ghannam@gmail.com>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

 net/ipv4/raw.c | 15 ++++++++++-----
 1 file changed, 10 insertions(+), 5 deletions(-)
---
The following fields have changed: Stable Date,Stable Commit,Stable Tag
Stable Date: - -> 2018-01-02
Stable Commit: - -> be27b620a861dc2a143b78e81e23f5622d9105da
Stable Tag: - -> 4.4.109

CVE-2017-17741:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit e39d200fa5bf5b94a0948db0dae44c1b73b84a56
Author: Wanpeng Li <wanpeng.li@hotmail.com>
Date:   Thu Dec 14 17:40:50 2017 -0800

    KVM: Fix stack-out-of-bounds read in write_mmio
    
    Reported by syzkaller:
    
      BUG: KASAN: stack-out-of-bounds in write_mmio+0x11e/0x270 [kvm]
      Read of size 8 at addr ffff8803259df7f8 by task syz-executor/32298
    
      CPU: 6 PID: 32298 Comm: syz-executor Tainted: G           OE    4.15.0-rc2+ #18
      Hardware name: LENOVO ThinkCentre M8500t-N000/SHARKBAY, BIOS FBKTC1AUS 02/16/2016
      Call Trace:
       dump_stack+0xab/0xe1
       print_address_description+0x6b/0x290
       kasan_report+0x28a/0x370
       write_mmio+0x11e/0x270 [kvm]
       emulator_read_write_onepage+0x311/0x600 [kvm]
       emulator_read_write+0xef/0x240 [kvm]
       emulator_fix_hypercall+0x105/0x150 [kvm]
       em_hypercall+0x2b/0x80 [kvm]
       x86_emulate_insn+0x2b1/0x1640 [kvm]
       x86_emulate_instruction+0x39a/0xb90 [kvm]
       handle_exception+0x1b4/0x4d0 [kvm_intel]
       vcpu_enter_guest+0x15a0/0x2640 [kvm]
       kvm_arch_vcpu_ioctl_run+0x549/0x7d0 [kvm]
       kvm_vcpu_ioctl+0x479/0x880 [kvm]
       do_vfs_ioctl+0x142/0x9a0
       SyS_ioctl+0x74/0x80
       entry_SYSCALL_64_fastpath+0x23/0x9a
    
    The path of patched vmmcall will patch 3 bytes opcode 0F 01 C1(vmcall)
    to the guest memory, however, write_mmio tracepoint always prints 8 bytes
    through *(u64 *)val since kvm splits the mmio access into 8 bytes. This
    leaks 5 bytes from the kernel stack (CVE-2017-17741).  This patch fixes
    it by just accessing the bytes which we operate on.
    
    Before patch:
    
    syz-executor-5567  [007] .... 51370.561696: kvm_mmio: mmio write len 3 gpa 0x10 val 0x1ffff10077c1010f
    
    After patch:
    
    syz-executor-13416 [002] .... 51302.299573: kvm_mmio: mmio write len 3 gpa 0x10 val 0xc1010f
    
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Reviewed-by: Darren Kenny <darren.kenny@oracle.com>
    Reviewed-by: Marc Zyngier <marc.zyngier@arm.com>
    Tested-by: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Paolo Bonzini <pbonzini@redhat.com>
    Cc: Radim Krčmář <rkrcmar@redhat.com>
    Cc: Marc Zyngier <marc.zyngier@arm.com>
    Cc: Christoffer Dall <christoffer.dall@linaro.org>
    Signed-off-by: Wanpeng Li <wanpeng.li@hotmail.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

 arch/x86/kvm/x86.c         | 8 ++++----
 include/trace/events/kvm.h | 7 +++++--
 virt/kvm/arm/mmio.c        | 6 +++---
 3 files changed, 12 insertions(+), 9 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-12-18
CVE: CVE-2017-17741
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-12-18
Linus Commit: e39d200fa5bf5b94a0948db0dae44c1b73b84a56
Linus Tag: 4.15
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-17863:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 37435f7e80ef9adc32a69013c18f135e3f434244
Author: Ben Hutchings <ben@decadent.org.uk>
Date:   Sat Dec 23 02:26:17 2017 +0000

    bpf/verifier: Fix states_equal() comparison of pointer and UNKNOWN
    
    An UNKNOWN_VALUE is not supposed to be derived from a pointer, unless
    pointer leaks are allowed.  Therefore, states_equal() must not treat
    a state with a pointer in a register as "equal" to a state with an
    UNKNOWN_VALUE in that register.
    
    This was fixed differently upstream, but the code around here was
    largely rewritten in 4.14 by commit f1174f77b50c "bpf/verifier: rework
    value tracking".  The bug can be detected by the bpf/verifier sub-test
    "pointer/scalar confusion in state equality check (way 1)".
    
    Signed-off-by: Ben Hutchings <ben@decadent.org.uk>
    Cc: Edward Cree <ecree@solarflare.com>
    Cc: Jann Horn <jannh@google.com>
    Cc: Alexei Starovoitov <ast@kernel.org>
    Cc: Daniel Borkmann <daniel@iogearbox.net>

 kernel/bpf/verifier.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-12-24
CVE: CVE-2017-17863
Break Date: 2017-05-14
Break Commit: 7bca0a9702edfc8d0e7e46f984ca422ffdbe0498
Break Tag: 4.9
Linus Fix Date: 2017-12-29
Linus Commit: 37435f7e80ef9adc32a69013c18f135e3f434244
Linus Tag: 4.9
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-17855:
CVE-2017-17864:
*************

---
Description of fix for this vulnerability:
commit 179d1c5602997fef5a940c6ddcf31212cbfebd14
Author: Jann Horn <jannh@google.com>
Date:   Mon Dec 18 20:11:59 2017 -0800

    bpf: don't prune branches when a scalar is replaced with a pointer
    
    This could be made safe by passing through a reference to env and checking
    for env->allow_ptr_leaks, but it would only work one way and is probably
    not worth the hassle - not doing it will not directly lead to program
    rejection.
    
    Fixes: f1174f77b50c ("bpf/verifier: rework value tracking")
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>

 kernel/bpf/verifier.c | 15 +++++++--------
 1 file changed, 7 insertions(+), 8 deletions(-)
---
The following fields have changed: 
