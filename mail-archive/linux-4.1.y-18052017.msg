
-----------------------------
Stable Kernel Security Notice
2017-05-18

Stable Branch: linux-4.1.y

All linux-4.1.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.1.y-stable-cve-list.html

CVE(s) in report:

CVE-2017-0605
CVE-2017-7472
CVE-2017-7487
CVE-2017-7495
CVE-2017-8924
CVE-2017-8924
CVE-2017-8925
-----------------------------

Details:

*************
CVE-2017-0605:
*************

---
Description of fix for this vulnerability:
commit e09e28671cda63e6308b31798b997639120e2a21
Author: Amey Telawane <ameyt@codeaurora.org>
Date:   Wed May 3 15:41:14 2017 +0530

    tracing: Use strlcpy() instead of strcpy() in __trace_find_cmdline()
    
    Strcpy is inherently not safe, and strlcpy() should be used instead.
    __trace_find_cmdline() uses strcpy() because the comms saved must have a
    terminating nul character, but it doesn't hurt to add the extra protection
    of using strlcpy() instead of strcpy().
    
    Link: http://lkml.kernel.org/r/1493806274-13936-1-git-send-email-amit.pundir@linaro.org
    
    Signed-off-by: Amey Telawane <ameyt@codeaurora.org>
    [AmitP: Cherry-picked this commit from CodeAurora kernel/msm-3.10
    https://source.codeaurora.org/quic/la/kernel/msm-3.10/commit/?id=2161ae9a70b12cf18ac8e5952a20161ffbccb477]
    Signed-off-by: Amit Pundir <amit.pundir@linaro.org>
    [ Updated change log and removed the "- 1" from len parameter ]
    Signed-off-by: Steven Rostedt (VMware) <rostedt@goodmis.org>

 kernel/trace/trace.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
---
The following fields have changed: Public Date
Public Date: 2017-05-02 -> 2017-05-12

CVE-2017-7472:
*************

---
Description of fix for this vulnerability:
commit c9f838d104fed6f2f61d68164712e3204bf5271b
Author: Eric Biggers <ebiggers@google.com>
Date:   Tue Apr 18 15:31:09 2017 +0100

    KEYS: fix keyctl_set_reqkey_keyring() to not leak thread keyrings
    
    This fixes CVE-2017-7472.
    
    Running the following program as an unprivileged user exhausts kernel
    memory by leaking thread keyrings:
    
    	#include <keyutils.h>
    
    	int main()
    	{
    		for (;;)
    			keyctl_set_reqkey_keyring(KEY_REQKEY_DEFL_THREAD_KEYRING);
    	}
    
    Fix it by only creating a new thread keyring if there wasn't one before.
    To make things more consistent, make install_thread_keyring_to_cred()
    and install_process_keyring_to_cred() both return 0 if the corresponding
    keyring is already present.
    
    Fixes: d84f4f992cbd ("CRED: Inaugurate COW credentials")
    Cc: stable@vger.kernel.org # 2.6.29+
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>

 security/keys/keyctl.c       | 11 ++++-------
 security/keys/process_keys.c | 44 +++++++++++++++++++++++++++-----------------
 2 files changed, 31 insertions(+), 24 deletions(-)
---
The following fields have changed: Public Date
Public Date: 2017-04-20 -> 2017-05-11

CVE-2017-7487:
*************

---
Description of fix for this vulnerability:
commit ee0d8d8482345ff97a75a7d747efc309f13b0d80
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Tue May 2 13:58:53 2017 +0300

    ipx: call ipxitf_put() in ioctl error path
    
    We should call ipxitf_put() if the copy_to_user() fails.
    
    Reported-by: 李强 <liqiang6-s@360.cn>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

 net/ipx/af_ipx.c | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)
---
The following fields have changed: Public Date
Public Date: 2017-05-12 -> 2017-05-14

CVE-2017-7495:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 06bd3c36a733ac27962fea7d6f47168841376824
Author: Jan Kara <jack@suse.cz>
Date:   Sun Apr 24 00:56:03 2016 -0400

    ext4: fix data exposure after a crash
    
    Huang has reported that in his powerfail testing he is seeing stale
    block contents in some of recently allocated blocks although he mounts
    ext4 in data=ordered mode. After some investigation I have found out
    that indeed when delayed allocation is used, we don't add inode to
    transaction's list of inodes needing flushing before commit. Originally
    we were doing that but commit f3b59291a69d removed the logic with a
    flawed argument that it is not needed.
    
    The problem is that although for delayed allocated blocks we write their
    contents immediately after allocating them, there is no guarantee that
    the IO scheduler or device doesn't reorder things and thus transaction
    allocating blocks and attaching them to inode can reach stable storage
    before actual block contents. Actually whenever we attach freshly
    allocated blocks to inode using a written extent, we should add inode to
    transaction's ordered inode list to make sure we properly wait for block
    contents to be written before committing the transaction. So that is
    what we do in this patch. This also handles other cases where stale data
    exposure was possible - like filling hole via mmap in
    data=ordered,nodelalloc mode.
    
    The only exception to the above rule are extending direct IO writes where
    blkdev_direct_IO() waits for IO to complete before increasing i_size and
    thus stale data exposure is not possible. For now we don't complicate
    the code with optimizing this special case since the overhead is pretty
    low. In case this is observed to be a performance problem we can always
    handle it using a special flag to ext4_map_blocks().
    
    CC: stable@vger.kernel.org
    Fixes: f3b59291a69d0b734be1fc8be489fef2dd846d3d
    Reported-by: "HUANG Weller (CM/ESW12-CN)" <Weller.Huang@cn.bosch.com>
    Tested-by: "HUANG Weller (CM/ESW12-CN)" <Weller.Huang@cn.bosch.com>
    Signed-off-by: Jan Kara <jack@suse.cz>
    Signed-off-by: Theodore Ts'o <tytso@mit.edu>

 fs/ext4/inode.c | 24 +++++++++++++++---------
 1 file changed, 15 insertions(+), 9 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-05-15
CVE: CVE-2017-7495
Break Date: 2012-11-15
Break Commit: f3b59291a69d0b734be1fc8be489fef2dd846d3d
Break Tag: 3.8
Linus Fix Date: 2016-04-24
Linus Commit: 06bd3c36a733ac27962fea7d6f47168841376824
Linus Tag: 4.7
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-8924:
CVE-2017-8924:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 654b404f2a222f918af9b0cd18ad469d0c941a8e
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Mar 6 17:36:40 2017 +0100

    USB: serial: io_ti: fix information leak in completion handler
    
    Add missing sanity check to the bulk-in completion handler to avoid an
    integer underflow that can be triggered by a malicious device.
    
    This avoids leaking 128 kB of memory content from after the URB transfer
    buffer to user space.
    
    Fixes: 8c209e6782ca ("USB: make actual_length in struct urb field u32")
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>	# 2.6.30
    Signed-off-by: Johan Hovold <johan@kernel.org>

 drivers/usb/serial/io_ti.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-05-12
CVE: CVE-2017-8924
Break Date: 2005-04-16
Break Commit: 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
Break Tag: 2.6
Linus Fix Date: 2017-03-08
Linus Commit: 654b404f2a222f918af9b0cd18ad469d0c941a8e
Linus Tag: 4.11
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-8924:
CVE-2017-8924:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 654b404f2a222f918af9b0cd18ad469d0c941a8e
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Mar 6 17:36:40 2017 +0100

    USB: serial: io_ti: fix information leak in completion handler
    
    Add missing sanity check to the bulk-in completion handler to avoid an
    integer underflow that can be triggered by a malicious device.
    
    This avoids leaking 128 kB of memory content from after the URB transfer
    buffer to user space.
    
    Fixes: 8c209e6782ca ("USB: make actual_length in struct urb field u32")
    Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")
    Cc: stable <stable@vger.kernel.org>	# 2.6.30
    Signed-off-by: Johan Hovold <johan@kernel.org>

 drivers/usb/serial/io_ti.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-05-12
CVE: CVE-2017-8924
Break Date: 2005-04-16
Break Commit: 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
Break Tag: 2.6
Linus Fix Date: 2017-03-08
Linus Commit: 654b404f2a222f918af9b0cd18ad469d0c941a8e
Linus Tag: 4.11
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-8925:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 30572418b445d85fcfe6c8fe84c947d2606767d8
Author: Johan Hovold <johan@kernel.org>
Date:   Mon Mar 6 17:36:38 2017 +0100

    USB: serial: omninet: fix reference leaks at open
    
    This driver needlessly took another reference to the tty on open, a
    reference which was then never released on close. This lead to not just
    a leak of the tty, but also a driver reference leak that prevented the
    driver from being unloaded after a port had once been opened.
    
    Fixes: 4a90f09b20f4 ("tty: usb-serial krefs")
    Cc: stable <stable@vger.kernel.org>	# 2.6.28
    Signed-off-by: Johan Hovold <johan@kernel.org>

 drivers/usb/serial/omninet.c | 6 ------
 1 file changed, 6 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-05-12
CVE: CVE-2017-8925
Break Date: 2008-10-13
Break Commit: 4a90f09b20f4622dcbff1f0e1e6bae1704f8ad8c
Break Tag: 2.6
Linus Fix Date: 2017-03-08
Linus Commit: 30572418b445d85fcfe6c8fe84c947d2606767d8
Linus Tag: 4.11
Stable Date: -
Stable Commit: -
Stable Tag: -
