
-----------------------------
Stable Kernel Security Notice
2018-01-24

Stable Branch: linux-4.1.y

All linux-4.1.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.1.y-stable-cve-list.html

CVE(s) in report:

CVE-2017-15126
CVE-2017-15127
CVE-2017-15128
-----------------------------

Details:

*************
CVE-2017-15126:
*************

---
Description of fix for this vulnerability:
commit 384632e67e0829deb8015ee6ad916b180049d252
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Tue Oct 3 16:15:38 2017 -0700

    userfaultfd: non-cooperative: fix fork use after free
    
    When reading the event from the uffd, we put it on a temporary
    fork_event list to detect if we can still access it after releasing and
    retaking the event_wqh.lock.
    
    If fork aborts and removes the event from the fork_event all is fine as
    long as we're still in the userfault read context and fork_event head is
    still alive.
    
    We've to put the event allocated in the fork kernel stack, back from
    fork_event list-head to the event_wqh head, before returning from
    userfaultfd_ctx_read, because the fork_event head lifetime is limited to
    the userfaultfd_ctx_read stack lifetime.
    
    Forgetting to move the event back to its event_wqh place then results in
    __remove_wait_queue(&ctx->event_wqh, &ewq->wq); in
    userfaultfd_event_wait_completion to remove it from a head that has been
    already freed from the reader stack.
    
    This could only happen if resolve_userfault_fork failed (for example if
    there are no file descriptors available to allocate the fork uffd).  If
    it succeeded it was put back correctly.
    
    Furthermore, after find_userfault_evt receives a fork event, the forked
    userfault context in fork_nctx and uwq->msg.arg.reserved.reserved1 can
    be released by the fork thread as soon as the event_wqh.lock is
    released.  Taking a reference on the fork_nctx before dropping the lock
    prevents an use after free in resolve_userfault_fork().
    
    If the fork side aborted and it already released everything, we still
    try to succeed resolve_userfault_fork(), if possible.
    
    Fixes: 893e26e61d04eac9 ("userfaultfd: non-cooperative: Add fork() event")
    Link: http://lkml.kernel.org/r/20170920180413.26713-1-aarcange@redhat.com
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Reported-by: Mark Rutland <mark.rutland@arm.com>
    Tested-by: Mark Rutland <mark.rutland@arm.com>
    Cc: Pavel Emelyanov <xemul@virtuozzo.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 fs/userfaultfd.c | 66 +++++++++++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 56 insertions(+), 10 deletions(-)
---
The following fields have changed: Public Date
Public Date: 2017-12-18 -> 2018-01-14

CVE-2017-15127:
*************

---
Description of fix for this vulnerability:
commit 5af10dfd0afc559bb4b0f7e3e8227a1578333995
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Thu Aug 10 15:23:38 2017 -0700

    userfaultfd: hugetlbfs: remove superfluous page unlock in VM_SHARED case
    
    huge_add_to_page_cache->add_to_page_cache implicitly unlocks the page
    before returning in case of errors.
    
    The error returned was -EEXIST by running UFFDIO_COPY on a non-hole
    offset of a VM_SHARED hugetlbfs mapping.  It was an userland bug that
    triggered it and the kernel must cope with it returning -EEXIST from
    ioctl(UFFDIO_COPY) as expected.
    
      page dumped because: VM_BUG_ON_PAGE(!PageLocked(page))
      kernel BUG at mm/filemap.c:964!
      invalid opcode: 0000 [#1] SMP
      CPU: 1 PID: 22582 Comm: qemu-system-x86 Not tainted 4.11.11-300.fc26.x86_64 #1
      RIP: unlock_page+0x4a/0x50
      Call Trace:
        hugetlb_mcopy_atomic_pte+0xc0/0x320
        mcopy_atomic+0x96f/0xbe0
        userfaultfd_ioctl+0x218/0xe90
        do_vfs_ioctl+0xa5/0x600
        SyS_ioctl+0x79/0x90
        entry_SYSCALL_64_fastpath+0x1a/0xa9
    
    Link: http://lkml.kernel.org/r/20170802165145.22628-2-aarcange@redhat.com
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Tested-by: Maxime Coquelin <maxime.coquelin@redhat.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: Alexey Perevalov <a.perevalov@samsung.com>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 mm/hugetlb.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
---
The following fields have changed: Public Date
Public Date: 2017-12-18 -> 2018-01-14

CVE-2017-15128:
*************

---
Description of fix for this vulnerability:
commit 1e3921471354244f70fe268586ff94a97a6dd4df
Author: Andrea Arcangeli <aarcange@redhat.com>
Date:   Thu Nov 2 15:59:29 2017 -0700

    userfaultfd: hugetlbfs: prevent UFFDIO_COPY to fill beyond the end of i_size
    
    This oops:
    
      kernel BUG at fs/hugetlbfs/inode.c:484!
      RIP: remove_inode_hugepages+0x3d0/0x410
      Call Trace:
        hugetlbfs_setattr+0xd9/0x130
        notify_change+0x292/0x410
        do_truncate+0x65/0xa0
        do_sys_ftruncate.constprop.3+0x11a/0x180
        SyS_ftruncate+0xe/0x10
        tracesys+0xd9/0xde
    
    was caused by the lack of i_size check in hugetlb_mcopy_atomic_pte.
    
    mmap() can still succeed beyond the end of the i_size after vmtruncate
    zapped vmas in those ranges, but the faults must not succeed, and that
    includes UFFDIO_COPY.
    
    We could differentiate the retval to userland to represent a SIGBUS like
    a page fault would do (vs SIGSEGV), but it doesn't seem very useful and
    we'd need to pick a random retval as there's no meaningful syscall
    retval that would differentiate from SIGSEGV and SIGBUS, there's just
    -EFAULT.
    
    Link: http://lkml.kernel.org/r/20171016223914.2421-2-aarcange@redhat.com
    Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
    Reviewed-by: Mike Kravetz <mike.kravetz@oracle.com>
    Cc: Mike Rapoport <rppt@linux.vnet.ibm.com>
    Cc: "Dr. David Alan Gilbert" <dgilbert@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 mm/hugetlb.c | 32 ++++++++++++++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)
---
The following fields have changed: Public Date
Public Date: 2017-12-31 -> 2018-01-14
