
-----------------------------
Stable Kernel Security Notice
2016-11-05

Stable Branch: linux-4.1.y

All linux-4.1.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.1.y-stable-cve-list.html

CVE(s) in report:

CVE-2015-1328
CVE-2015-1333
CVE-2015-1339
-----------------------------

Details:

*************
CVE-2015-1328:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2015-06-15
CVE: CVE-2015-1328
Break Date: -
Break Commit: local-2015-1328-break
Break Tag: -
Linus Fix Date: -
Linus Commit: local-2015-1328-fix
Linus Tag: -
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2015-1333:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.1.4.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit ca4da5dd1f99fe9c59f1709fb43e818b18ad20e0
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Jul 27 15:23:43 2015 +0100

    KEYS: ensure we free the assoc array edit if edit is valid
    
    __key_link_end is not freeing the associated array edit structure
    and this leads to a 512 byte memory leak each time an identical
    existing key is added with add_key().
    
    The reason the add_key() system call returns okay is that
    key_create_or_update() calls __key_link_begin() before checking to see
    whether it can update a key directly rather than adding/replacing - which
    it turns out it can.  Thus __key_link() is not called through
    __key_instantiate_and_link() and __key_link_end() must cancel the edit.
    
    CVE-2015-1333
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>

 security/keys/keyring.c |    8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2015-08-31
CVE: CVE-2015-1333
Break Date: 2013-10-30
Break Commit: 034faeb9ef390d58239e1dce748143f6b35a0d9b
Break Tag: 3.13
Linus Fix Date: 2015-07-28
Linus Commit: ca4da5dd1f99fe9c59f1709fb43e818b18ad20e0
Linus Tag: 4.2
Stable Date: 2015-08-03
Stable Commit: 4fd5dc9eece297f49f16f82422ead3a28b11ea70
Stable Tag: 4.1.4

CVE-2015-1339:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 2c5816b4beccc8ba709144539f6fdd764f8fa49c
Author: Miklos Szeredi <miklos@szeredi.hu>
Date:   Tue Nov 10 10:32:36 2015 +0100

    cuse: fix memory leak
    
    The problem is that fuse_dev_alloc() acquires an extra reference to cc.fc,
    and the original ref count is never dropped.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Miklos Szeredi <miklos@szeredi.hu>
    Fixes: cc080e9e9be1 ("fuse: introduce per-instance fuse_dev structure")
    Cc: <stable@vger.kernel.org> # v4.2+

 fs/fuse/cuse.c |    2 ++
 1 file changed, 2 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-04-27
CVE: CVE-2015-1339
Break Date: 2015-07-01
Break Commit: cc080e9e9be16ccf26135d366d7d2b65209f1d56
Break Tag: 4.2
Linus Fix Date: 2015-11-10
Linus Commit: 2c5816b4beccc8ba709144539f6fdd764f8fa49c
Linus Tag: 4.4
Stable Date: -
Stable Commit: -
Stable Tag: -
