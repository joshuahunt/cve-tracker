
-----------------------------
Stable Kernel Security Notice
2016-11-07

Stable Branch: linux-4.1.y

All linux-4.1.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.1.y-stable-cve-list.html

CVE(s) in report:

CVE-2013-4312
CVE-2013-7446
CVE-2015-1328
CVE-2015-1333
CVE-2015-1339
CVE-2015-3332
CVE-2016-2143
-----------------------------

Details:

*************
CVE-2013-4312:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.1.17.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 712f4aad406bb1ed67f3f98d04c044191f0ff593
Author: willy tarreau <w@1wt.eu>
Date:   Sun Jan 10 07:54:56 2016 +0100

    unix: properly account for FDs passed over unix sockets
    
    It is possible for a process to allocate and accumulate far more FDs than
    the process' limit by sending them over a unix socket then closing them
    to keep the process' fd count low.
    
    This change addresses this problem by keeping track of the number of FDs
    in flight per user and preventing non-privileged processes from having
    more FDs in flight than their configured FD limit.
    
    Reported-by: socketpair@gmail.com
    Reported-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
    Mitigates: CVE-2013-4312 (Linux 2.0+)
    Suggested-by: Linus Torvalds <torvalds@linux-foundation.org>
    Acked-by: Hannes Frederic Sowa <hannes@stressinduktion.org>
    Signed-off-by: Willy Tarreau <w@1wt.eu>
    Signed-off-by: David S. Miller <davem@davemloft.net>

 include/linux/sched.h |    1 +
 net/unix/af_unix.c    |   24 ++++++++++++++++++++----
 net/unix/garbage.c    |   13 ++++++++-----
 3 files changed, 29 insertions(+), 9 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-02-07
CVE: CVE-2013-4312
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2016-01-11
Linus Commit: 712f4aad406bb1ed67f3f98d04c044191f0ff593
Linus Tag: 4.5
Stable Date: 2016-01-31
Stable Commit: dc6b0ec667f67d4768e72c1b7f1bbc14ea52379c
Stable Tag: 4.1.17

CVE-2013-7446:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.1.15.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 7d267278a9ece963d77eefec61630223fce08c6c
Author: Rainer Weikusat <rweikusat@mobileactivedefense.com>
Date:   Fri Nov 20 22:07:23 2015 +0000

    unix: avoid use-after-free in ep_remove_wait_queue
    
    Rainer Weikusat <rweikusat@mobileactivedefense.com> writes:
    An AF_UNIX datagram socket being the client in an n:1 association with
    some server socket is only allowed to send messages to the server if the
    receive queue of this socket contains at most sk_max_ack_backlog
    datagrams. This implies that prospective writers might be forced to go
    to sleep despite none of the message presently enqueued on the server
    receive queue were sent by them. In order to ensure that these will be
    woken up once space becomes again available, the present unix_dgram_poll
    routine does a second sock_poll_wait call with the peer_wait wait queue
    of the server socket as queue argument (unix_dgram_recvmsg does a wake
    up on this queue after a datagram was received). This is inherently
    problematic because the server socket is only guaranteed to remain alive
    for as long as the client still holds a reference to it. In case the
    connection is dissolved via connect or by the dead peer detection logic
    in unix_dgram_sendmsg, the server socket may be freed despite "the
    polling mechanism" (in particular, epoll) still has a pointer to the
    corresponding peer_wait queue. There's no way to forcibly deregister a
    wait queue with epoll.
    
    Based on an idea by Jason Baron, the patch below changes the code such
    that a wait_queue_t belonging to the client socket is enqueued on the
    peer_wait queue of the server whenever the peer receive queue full
    condition is detected by either a sendmsg or a poll. A wake up on the
    peer queue is then relayed to the ordinary wait queue of the client
    socket via wake function. The connection to the peer wait queue is again
    dissolved if either a wake up is about to be relayed or the client
    socket reconnects or a dead peer is detected or the client socket is
    itself closed. This enables removing the second sock_poll_wait from
    unix_dgram_poll, thus avoiding the use-after-free, while still ensuring
    that no blocked writer sleeps forever.
    
    Signed-off-by: Rainer Weikusat <rweikusat@mobileactivedefense.com>
    Fixes: ec0d215f9420 ("af_unix: fix 'poll for write'/connected DGRAM sockets")
    Reviewed-by: Jason Baron <jbaron@akamai.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

 include/net/af_unix.h |    1 +
 net/unix/af_unix.c    |  183 ++++++++++++++++++++++++++++++++++++++++++++-----
 2 files changed, 165 insertions(+), 19 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2015-12-28
CVE: CVE-2013-7446
Break Date: 2008-06-27
Break Commit: ec0d215f9420564fc8286dcf93d2d068bb53a07e
Break Tag: 2.6
Linus Fix Date: 2015-11-23
Linus Commit: 7d267278a9ece963d77eefec61630223fce08c6c
Linus Tag: 4.4
Stable Date: 2015-12-14
Stable Commit: 5c77e26862ce604edea05b3442ed765e9756fe0f
Stable Tag: 4.1.15

CVE-2015-1328:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2015-06-15
CVE: CVE-2015-1328
Break Date: -
Break Commit: local-2015-1328-break
Break Tag: -
Linus Fix Date: -
Linus Commit: local-2015-1328-fix
Linus Tag: -
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2015-1333:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.1.4.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit ca4da5dd1f99fe9c59f1709fb43e818b18ad20e0
Author: Colin Ian King <colin.king@canonical.com>
Date:   Mon Jul 27 15:23:43 2015 +0100

    KEYS: ensure we free the assoc array edit if edit is valid
    
    __key_link_end is not freeing the associated array edit structure
    and this leads to a 512 byte memory leak each time an identical
    existing key is added with add_key().
    
    The reason the add_key() system call returns okay is that
    key_create_or_update() calls __key_link_begin() before checking to see
    whether it can update a key directly rather than adding/replacing - which
    it turns out it can.  Thus __key_link() is not called through
    __key_instantiate_and_link() and __key_link_end() must cancel the edit.
    
    CVE-2015-1333
    
    Signed-off-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>

 security/keys/keyring.c |    8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2015-08-31
CVE: CVE-2015-1333
Break Date: 2013-10-30
Break Commit: 034faeb9ef390d58239e1dce748143f6b35a0d9b
Break Tag: 3.13
Linus Fix Date: 2015-07-28
Linus Commit: ca4da5dd1f99fe9c59f1709fb43e818b18ad20e0
Linus Tag: 4.2
Stable Date: 2015-08-03
Stable Commit: 4fd5dc9eece297f49f16f82422ead3a28b11ea70
Stable Tag: 4.1.4

CVE-2015-1339:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 2c5816b4beccc8ba709144539f6fdd764f8fa49c
Author: Miklos Szeredi <miklos@szeredi.hu>
Date:   Tue Nov 10 10:32:36 2015 +0100

    cuse: fix memory leak
    
    The problem is that fuse_dev_alloc() acquires an extra reference to cc.fc,
    and the original ref count is never dropped.
    
    Reported-by: Colin Ian King <colin.king@canonical.com>
    Signed-off-by: Miklos Szeredi <miklos@szeredi.hu>
    Fixes: cc080e9e9be1 ("fuse: introduce per-instance fuse_dev structure")
    Cc: <stable@vger.kernel.org> # v4.2+

 fs/fuse/cuse.c |    2 ++
 1 file changed, 2 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-04-27
CVE: CVE-2015-1339
Break Date: 2015-07-01
Break Commit: cc080e9e9be16ccf26135d366d7d2b65209f1d56
Break Tag: 4.2
Linus Fix Date: 2015-11-10
Linus Commit: 2c5816b4beccc8ba709144539f6fdd764f8fa49c
Linus Tag: 4.4
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2015-3332:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2015-05-27
CVE: CVE-2015-3332
Break Date: 2014-11-19
Break Commit: 355a901e6cf1b2b763ec85caa2a9f04fbcc4ab4a
Break Tag: 3.19
Linus Fix Date: -
Linus Commit: local-2015-3332
Linus Tag: -
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2016-2143:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.1.21.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 3446c13b268af86391d06611327006b059b8bab1
Author: Martin Schwidefsky <schwidefsky@de.ibm.com>
Date:   Mon Feb 15 14:46:49 2016 +0100

    s390/mm: four page table levels vs. fork
    
    The fork of a process with four page table levels is broken since
    git commit 6252d702c5311ce9 "[S390] dynamic page tables."
    
    All new mm contexts are created with three page table levels and
    an asce limit of 4TB. If the parent has four levels dup_mmap will
    add vmas to the new context which are outside of the asce limit.
    The subsequent call to copy_page_range will walk the three level
    page table structure of the new process with non-zero pgd and pud
    indexes. This leads to memory clobbers as the pgd_index *and* the
    pud_index is added to the mm->pgd pointer without a pgd_deref
    in between.
    
    The init_new_context() function is selecting the number of page
    table levels for a new context. The function is used by mm_init()
    which in turn is called by dup_mm() and mm_alloc(). These two are
    used by fork() and exec(). The init_new_context() function can
    distinguish the two cases by looking at mm->context.asce_limit,
    for fork() the mm struct has been copied and the number of page
    table levels may not change. For exec() the mm_alloc() function
    set the new mm structure to zero, in this case a three-level page
    table is created as the temporary stack space is located at
    STACK_TOP_MAX = 4TB.
    
    This fixes CVE-2016-2143.
    
    Reported-by: Marcin Kościelnicki <koriakin@0x04.net>
    Reviewed-by: Heiko Carstens <heiko.carstens@de.ibm.com>
    Cc: stable@vger.kernel.org
    Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>

 arch/s390/include/asm/mmu_context.h |   16 +++++++++++-----
 arch/s390/include/asm/pgalloc.h     |   24 +++++++++++++++++++-----
 2 files changed, 30 insertions(+), 10 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-04-27
CVE: CVE-2016-2143
Break Date: 2008-02-09
Break Commit: 6252d702c5311ce916caf75ed82e5c8245171c92
Break Tag: 2.6
Linus Fix Date: 2016-03-10
Linus Commit: 3446c13b268af86391d06611327006b059b8bab1
Linus Tag: 4.5
Stable Date: 2016-03-22
Stable Commit: 09b4fd2014b1ef7d46df8df553f94254ba2a0497
Stable Tag: 4.1.21
