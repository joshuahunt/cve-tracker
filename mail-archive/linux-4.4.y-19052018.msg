
-----------------------------
Stable Kernel Security Notice
2018-05-19

Stable Branch: linux-4.4.y

All linux-4.4.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.4.y-stable-cve-list.html

CVE(s) in report:

CVE-2017-18270
CVE-2018-11232
-----------------------------

Details:

*************
CVE-2017-18270:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.90.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 237bbd29f7a049d310d907f4b2716a7feef9abf3
Author: Eric Biggers <ebiggers@google.com>
Date:   Mon Sep 18 11:37:03 2017 -0700

    KEYS: prevent creating a different user's keyrings
    
    It was possible for an unprivileged user to create the user and user
    session keyrings for another user.  For example:
    
        sudo -u '#3000' sh -c 'keyctl add keyring _uid.4000 "" @u
                               keyctl add keyring _uid_ses.4000 "" @u
                               sleep 15' &
        sleep 1
        sudo -u '#4000' keyctl describe @u
        sudo -u '#4000' keyctl describe @us
    
    This is problematic because these "fake" keyrings won't have the right
    permissions.  In particular, the user who created them first will own
    them and will have full access to them via the possessor permissions,
    which can be used to compromise the security of a user's keys:
    
        -4: alswrv-----v------------  3000     0 keyring: _uid.4000
        -5: alswrv-----v------------  3000     0 keyring: _uid_ses.4000
    
    Fix it by marking user and user session keyrings with a flag
    KEY_FLAG_UID_KEYRING.  Then, when searching for a user or user session
    keyring by name, skip all keyrings that don't have the flag set.
    
    Fixes: 69664cf16af4 ("keys: don't generate user and user session keyrings unless they're accessed")
    Cc: <stable@vger.kernel.org>	[v2.6.26+]
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>

 include/linux/key.h          |  2 ++
 security/keys/internal.h     |  2 +-
 security/keys/key.c          |  2 ++
 security/keys/keyring.c      | 23 ++++++++++++++---------
 security/keys/process_keys.c |  6 ++++--
 5 files changed, 23 insertions(+), 12 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-05-18
CVE: CVE-2017-18270
Break Date: 2008-04-29
Break Commit: 69664cf16af4f31cd54d77948a4baf9c7e0ca7b9
Break Tag: 2.6
Linus Fix Date: 2017-09-25
Linus Commit: 237bbd29f7a049d310d907f4b2716a7feef9abf3
Linus Tag: 4.14-rc3
Stable Date: 2017-10-05
Stable Commit: 539255aea88e47932a98ba7656775cbca4f3d27c
Stable Tag: 4.4.90

CVE-2018-11232:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit f09444639099584bc4784dfcd85ada67c6f33e0f
Author: Wang Nan <wangnan0@huawei.com>
Date:   Mon Jan 23 10:41:22 2017 -0700

    coresight: fix kernel panic caused by invalid CPU
    
    Commit d52c9750f150 ("coresight: reset "enable_sink" flag when need be")
    caused a kernel panic because of the using of an invalid value: after
    'for_each_cpu(cpu, mask)', value of local variable 'cpu' become invalid,
    causes following 'cpu_to_node' access invalid memory area.
    
    This patch brings the deleted 'cpu = cpumask_first(mask)' back.
    
    Panic log:
    
     $ perf record -e cs_etm// ls
    
     Unable to handle kernel paging request at virtual address fffe801804af4f10
     pgd = ffff8017ce031600
     [fffe801804af4f10] *pgd=0000000000000000, *pud=0000000000000000
     Internal error: Oops: 96000004 [#1] SMP
     Modules linked in:
     CPU: 33 PID: 1619 Comm: perf Not tainted 4.7.1+ #16
     Hardware name: Huawei Taishan 2280 /CH05TEVBA, BIOS 1.10 11/24/2016
     task: ffff8017cb0c8400 ti: ffff8017cb154000 task.ti: ffff8017cb154000
     PC is at tmc_alloc_etf_buffer+0x60/0xd4
     LR is at tmc_alloc_etf_buffer+0x44/0xd4
     pc : [<ffff000008633df8>] lr : [<ffff000008633ddc>] pstate: 60000145
     sp : ffff8017cb157b40
     x29: ffff8017cb157b40 x28: 0000000000000000
     ...skip...
     7a60: ffff000008c64dc8 0000000000000006 0000000000000253 ffffffffffffffff
     7a80: 0000000000000000 0000000000000000 ffff0000080872cc 0000000000000001
     [<ffff000008633df8>] tmc_alloc_etf_buffer+0x60/0xd4
     [<ffff000008632b9c>] etm_setup_aux+0x1dc/0x1e8
     [<ffff00000816eed4>] rb_alloc_aux+0x2b0/0x338
     [<ffff00000816a5e4>] perf_mmap+0x414/0x568
     [<ffff0000081ab694>] mmap_region+0x324/0x544
     [<ffff0000081abbe8>] do_mmap+0x334/0x3e0
     [<ffff000008191150>] vm_mmap_pgoff+0xa4/0xc8
     [<ffff0000081a9a30>] SyS_mmap_pgoff+0xb0/0x22c
     [<ffff0000080872e4>] sys_mmap+0x18/0x28
     [<ffff0000080843f0>] el0_svc_naked+0x24/0x28
     Code: 912040a5 d0001c00 f873d821 911c6000 (b8656822)
     ---[ end trace 98933da8f92b0c9a ]---
    
    Signed-off-by: Wang Nan <wangnan0@huawei.com>
    Cc: Xia Kaixu <xiakaixu@huawei.com>
    Cc: Li Zefan <lizefan@huawei.com>
    Cc: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: linux-arm-kernel@lists.infradead.org
    Cc: linux-kernel@vger.kernel.org
    Fixes: d52c9750f150 ("coresight: reset "enable_sink" flag when need be")
    Signed-off-by: Mathieu Poirier <mathieu.poirier@linaro.org>
    Cc: stable <stable@vger.kernel.org> # 4.10
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

 drivers/hwtracing/coresight/coresight-etm-perf.c | 1 +
 1 file changed, 1 insertion(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-05-18
CVE: CVE-2018-11232
Break Date: 2016-11-29
Break Commit: d52c9750f150111dc7f73e4036f6948b20c9f8c3
Break Tag: 4.10-rc1
Linus Fix Date: 2017-01-25
Linus Commit: f09444639099584bc4784dfcd85ada67c6f33e0f
Linus Tag: 4.11-rc1
Stable Date: -
Stable Commit: -
Stable Tag: -
