
-----------------------------
Stable Kernel Security Notice
2017-04-18

Stable Branch: linux-4.1.y

All linux-4.1.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.1.y-stable-cve-list.html

CVE(s) in report:

CVE-2017-5669
CVE-2017-5972
-----------------------------

Details:

*************
CVE-2017-5669:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 95e91b831f87ac8e1f8ed50c14d709089b4e01b8
Author: Davidlohr Bueso <dave@stgolabs.net>
Date:   Mon Feb 27 14:28:24 2017 -0800

    ipc/shm: Fix shmat mmap nil-page protection
    
    The issue is described here, with a nice testcase:
    
        https://bugzilla.kernel.org/show_bug.cgi?id=192931
    
    The problem is that shmat() calls do_mmap_pgoff() with MAP_FIXED, and
    the address rounded down to 0.  For the regular mmap case, the
    protection mentioned above is that the kernel gets to generate the
    address -- arch_get_unmapped_area() will always check for MAP_FIXED and
    return that address.  So by the time we do security_mmap_addr(0) things
    get funky for shmat().
    
    The testcase itself shows that while a regular user crashes, root will
    not have a problem attaching a nil-page.  There are two possible fixes
    to this.  The first, and which this patch does, is to simply allow root
    to crash as well -- this is also regular mmap behavior, ie when hacking
    up the testcase and adding mmap(...  |MAP_FIXED).  While this approach
    is the safer option, the second alternative is to ignore SHM_RND if the
    rounded address is 0, thus only having MAP_SHARED flags.  This makes the
    behavior of shmat() identical to the mmap() case.  The downside of this
    is obviously user visible, but does make sense in that it maintains
    semantics after the round-down wrt 0 address and mmap.
    
    Passes shm related ltp tests.
    
    Link: http://lkml.kernel.org/r/1486050195-18629-1-git-send-email-dave@stgolabs.net
    Signed-off-by: Davidlohr Bueso <dbueso@suse.de>
    Reported-by: Gareth Evans <gareth.evans@contextis.co.uk>
    Cc: Manfred Spraul <manfred@colorfullife.com>
    Cc: Michael Kerrisk <mtk.manpages@googlemail.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 ipc/shm.c | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-02-24
CVE: CVE-2017-5669
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-02-27
Linus Commit: 95e91b831f87ac8e1f8ed50c14d709089b4e01b8
Linus Tag: 4.11
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-5972:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit e994b2f0fb9229aeff5eea9541320bd7b2ca8714
Author: Eric Dumazet <edumazet@google.com>
Date:   Fri Oct 2 11:43:39 2015 -0700

    tcp: do not lock listener to process SYN packets
    
    Everything should now be ready to finally allow SYN
    packets processing without holding listener lock.
    
    Tested:
    
    3.5 Mpps SYNFLOOD. Plenty of cpu cycles available.
    
    Next bottleneck is the refcount taken on listener,
    that could be avoided if we remove SLAB_DESTROY_BY_RCU
    strict semantic for listeners, and use regular RCU.
    
        13.18%  [kernel]  [k] __inet_lookup_listener
         9.61%  [kernel]  [k] tcp_conn_request
         8.16%  [kernel]  [k] sha_transform
         5.30%  [kernel]  [k] inet_reqsk_alloc
         4.22%  [kernel]  [k] sock_put
         3.74%  [kernel]  [k] tcp_make_synack
         2.88%  [kernel]  [k] ipt_do_table
         2.56%  [kernel]  [k] memcpy_erms
         2.53%  [kernel]  [k] sock_wfree
         2.40%  [kernel]  [k] tcp_v4_rcv
         2.08%  [kernel]  [k] fib_table_lookup
         1.84%  [kernel]  [k] tcp_openreq_init_rwin
    
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

 net/ipv4/tcp_ipv4.c | 11 +++++++++--
 net/ipv6/tcp_ipv6.c | 11 +++++++++--
 2 files changed, 18 insertions(+), 4 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2017-02-14
CVE: CVE-2017-5972
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2015-10-03
Linus Commit: e994b2f0fb9229aeff5eea9541320bd7b2ca8714
Linus Tag: 4.4
Stable Date: -
Stable Commit: -
Stable Tag: -
