
-----------------------------
Stable Kernel Security Notice
2016-12-13

Stable Branch: linux-3.14.y

All linux-3.14.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-3.14.y-stable-cve-list.html

CVE(s) in report:

CVE-2016-6786
CVE-2016-6787
CVE-2016-9755
-----------------------------

Details:

*************
CVE-2016-6786:
CVE-2016-6787:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit f63a8daa5812afef4f06c962351687e1ff9ccb2b
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri Jan 23 12:24:14 2015 +0100

    perf: Fix event->ctx locking
    
    There have been a few reported issues wrt. the lack of locking around
    changing event->ctx. This patch tries to address those.
    
    It avoids the whole rwsem thing; and while it appears to work, please
    give it some thought in review.
    
    What I did fail at is sensible runtime checks on the use of
    event->ctx, the RCU use makes it very hard.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/20150123125834.209535886@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

 kernel/events/core.c | 244 +++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 207 insertions(+), 37 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-12-12
CVE: CVE-2016-6786
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2015-02-04
Linus Commit: f63a8daa5812afef4f06c962351687e1ff9ccb2b
Linus Tag: 4.0
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2016-6786:
CVE-2016-6787:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit f63a8daa5812afef4f06c962351687e1ff9ccb2b
Author: Peter Zijlstra <peterz@infradead.org>
Date:   Fri Jan 23 12:24:14 2015 +0100

    perf: Fix event->ctx locking
    
    There have been a few reported issues wrt. the lack of locking around
    changing event->ctx. This patch tries to address those.
    
    It avoids the whole rwsem thing; and while it appears to work, please
    give it some thought in review.
    
    What I did fail at is sensible runtime checks on the use of
    event->ctx, the RCU use makes it very hard.
    
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Cc: Paul E. McKenney <paulmck@linux.vnet.ibm.com>
    Cc: Jiri Olsa <jolsa@redhat.com>
    Cc: Arnaldo Carvalho de Melo <acme@kernel.org>
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    Link: http://lkml.kernel.org/r/20150123125834.209535886@infradead.org
    Signed-off-by: Ingo Molnar <mingo@kernel.org>

 kernel/events/core.c | 244 +++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 207 insertions(+), 37 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-12-12
CVE: CVE-2016-6786
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2015-02-04
Linus Commit: f63a8daa5812afef4f06c962351687e1ff9ccb2b
Linus Tag: 4.0
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2016-9755:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 9b57da0630c9fd36ed7a20fc0f98dc82cc0777fa
Author: Florian Westphal <fw@strlen.de>
Date:   Tue Nov 29 02:17:34 2016 +0100

    netfilter: ipv6: nf_defrag: drop mangled skb on ream error
    
    Dmitry Vyukov reported GPF in network stack that Andrey traced down to
    negative nh offset in nf_ct_frag6_queue().
    
    Problem is that all network headers before fragment header are pulled.
    Normal ipv6 reassembly will drop the skb when errors occur further down
    the line.
    
    netfilter doesn't do this, and instead passed the original fragment
    along.  That was also fine back when netfilter ipv6 defrag worked with
    cloned fragments, as the original, pristine fragment was passed on.
    
    So we either have to undo the pull op, or discard such fragments.
    Since they're malformed after all (e.g. overlapping fragment) it seems
    preferrable to just drop them.
    
    Same for temporary errors -- it doesn't make sense to accept (and
    perhaps forward!) only some fragments of same datagram.
    
    Fixes: 029f7f3b8701cc7ac ("netfilter: ipv6: nf_defrag: avoid/free clone operations")
    Reported-by: Dmitry Vyukov <dvyukov@google.com>
    Debugged-by: Andrey Konovalov <andreyknvl@google.com>
    Diagnosed-by: Eric Dumazet <Eric Dumazet <edumazet@google.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Acked-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Pablo Neira Ayuso <pablo@netfilter.org>

 net/ipv6/netfilter/nf_conntrack_reasm.c   | 4 ++--
 net/ipv6/netfilter/nf_defrag_ipv6_hooks.c | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2016-12-01
CVE: CVE-2016-9755
Break Date: 2015-11-23
Break Commit: 029f7f3b8701cc7aca8bdb31f0c7edd6a479e357
Break Tag: 4.5
Linus Fix Date: 2016-11-29
Linus Commit: 9b57da0630c9fd36ed7a20fc0f98dc82cc0777fa
Linus Tag: 4.9
Stable Date: -
Stable Commit: -
Stable Tag: -
