
-----------------------------
Stable Kernel Security Notice
2018-04-07

Stable Branch: linux-4.4.y

All linux-4.4.y CVEs:
http://joshuahunt.github.io/cve-tracker/linux-4.4.y-stable-cve-list.html

CVE(s) in report:

CVE-2017-13305
CVE-2017-13307
CVE-2017-18249
CVE-2017-18257
CVE-2018-1091
CVE-2018-5703
CVE-2018-7740
CVE-2018-8822
-----------------------------

Details:

*************
CVE-2017-13305:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.116.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 794b4bc292f5d31739d89c0202c54e7dc9bc3add
Author: Eric Biggers <ebiggers@google.com>
Date:   Thu Jun 8 14:48:18 2017 +0100

    KEYS: encrypted: fix buffer overread in valid_master_desc()
    
    With the 'encrypted' key type it was possible for userspace to provide a
    data blob ending with a master key description shorter than expected,
    e.g. 'keyctl add encrypted desc "new x" @s'.  When validating such a
    master key description, validate_master_desc() could read beyond the end
    of the buffer.  Fix this by using strncmp() instead of memcmp().  [Also
    clean up the code to deduplicate some logic.]
    
    Cc: Mimi Zohar <zohar@linux.vnet.ibm.com>
    Signed-off-by: Eric Biggers <ebiggers@google.com>
    Signed-off-by: David Howells <dhowells@redhat.com>
    Signed-off-by: James Morris <james.l.morris@oracle.com>

 security/keys/encrypted-keys/encrypted.c | 31 +++++++++++++++----------------
 1 file changed, 15 insertions(+), 16 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-04-04
CVE: CVE-2017-13305
Break Date: 2010-11-29
Break Commit: 7e70cb4978507cf31d76b90e4cfb4c28cad87f0c
Break Tag: 2.6
Linus Fix Date: 2017-06-09
Linus Commit: 794b4bc292f5d31739d89c0202c54e7dc9bc3add
Linus Tag: 4.12-rc5
Stable Date: 2018-02-16
Stable Commit: 33813d43dd593e1c32c567c75483233212b825ae
Stable Tag: 4.4.116

CVE-2017-13307:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.90.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 9561475db680f7144d2223a409dd3d7e322aca03
Author: Nicolai Stange <nstange@suse.de>
Date:   Mon Sep 11 09:45:40 2017 +0200

    PCI: Fix race condition with driver_override
    
    The driver_override implementation is susceptible to a race condition when
    different threads are reading vs. storing a different driver override.  Add
    locking to avoid the race condition.
    
    This is in close analogy to commit 6265539776a0 ("driver core: platform:
    fix race condition with driver_override") from Adrian Salido.
    
    Fixes: 782a985d7af2 ("PCI: Introduce new device binding path using pci_dev.driver_override")
    Signed-off-by: Nicolai Stange <nstange@suse.de>
    Signed-off-by: Bjorn Helgaas <bhelgaas@google.com>
    Cc: stable@vger.kernel.org	# v3.16+

 drivers/pci/pci-sysfs.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-04-04
CVE: CVE-2017-13307
Break Date: 2014-05-28
Break Commit: 782a985d7af26db39e86070d28f987cad21313c0
Break Tag: 3.16-rc1
Linus Fix Date: 2017-09-25
Linus Commit: 9561475db680f7144d2223a409dd3d7e322aca03
Linus Tag: 4.14-rc7
Stable Date: 2017-10-05
Stable Commit: b08dc7d4cfa124961798fb82aaca7e5fd44a7671
Stable Tag: 4.4.90

CVE-2017-18249:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 30a61ddf8117c26ac5b295e1233eaa9629a94ca3
Author: Chao Yu <yuchao0@huawei.com>
Date:   Wed Mar 22 14:45:05 2017 +0800

    f2fs: fix race condition in between free nid allocator/initializer
    
    In below concurrent case, allocated nid can be loaded into free nid cache
    and be allocated again.
    
    Thread A				Thread B
    - f2fs_create
     - f2fs_new_inode
      - alloc_nid
       - __insert_nid_to_list(ALLOC_NID_LIST)
    					- f2fs_balance_fs_bg
    					 - build_free_nids
    					  - __build_free_nids
    					   - scan_nat_page
    					    - add_free_nid
    					     - __lookup_nat_cache
     - f2fs_add_link
      - init_inode_metadata
       - new_inode_page
        - new_node_page
         - set_node_addr
     - alloc_nid_done
      - __remove_nid_from_list(ALLOC_NID_LIST)
    					     - __insert_nid_to_list(FREE_NID_LIST)
    
    This patch makes nat cache lookup and free nid list operation being atomical
    to avoid this race condition.
    
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>
    Signed-off-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

 fs/f2fs/node.c | 63 +++++++++++++++++++++++++++++++++++++++++-----------------
 1 file changed, 45 insertions(+), 18 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-03-26
CVE: CVE-2017-18249
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-03-24
Linus Commit: 30a61ddf8117c26ac5b295e1233eaa9629a94ca3
Linus Tag: 4.12-rc1
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2017-18257:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit b86e33075ed1909d8002745b56ecf73b833db143
Author: Wei Fang <fangwei1@huawei.com>
Date:   Sun Jan 22 12:21:02 2017 +0800

    f2fs: fix a dead loop in f2fs_fiemap()
    
    A dead loop can be triggered in f2fs_fiemap() using the test case
    as below:
    
    	...
    	fd = open();
    	fallocate(fd, 0, 0, 4294967296);
    	ioctl(fd, FS_IOC_FIEMAP, fiemap_buf);
    	...
    
    It's caused by an overflow in __get_data_block():
    	...
    	bh->b_size = map.m_len << inode->i_blkbits;
    	...
    map.m_len is an unsigned int, and bh->b_size is a size_t which is 64 bits
    on 64 bits archtecture, type conversion from an unsigned int to a size_t
    will result in an overflow.
    
    In the above-mentioned case, bh->b_size will be zero, and f2fs_fiemap()
    will call get_data_block() at block 0 again an again.
    
    Fix this by adding a force conversion before left shift.
    
    Signed-off-by: Wei Fang <fangwei1@huawei.com>
    Acked-by: Chao Yu <yuchao0@huawei.com>
    Signed-off-by: Jaegeuk Kim <jaegeuk@kernel.org>

 fs/f2fs/data.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-04-04
CVE: CVE-2017-18257
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2017-02-22
Linus Commit: b86e33075ed1909d8002745b56ecf73b833db143
Linus Tag: 4.11-rc1
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2018-1091:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit c1fa0768a8713b135848f78fd43ffc208d8ded70
Author: Gustavo Romero <gromero@linux.vnet.ibm.com>
Date:   Wed Sep 13 22:13:48 2017 -0400

    powerpc/tm: Flush TM only if CPU has TM feature
    
    Commit cd63f3c ("powerpc/tm: Fix saving of TM SPRs in core dump")
    added code to access TM SPRs in flush_tmregs_to_thread(). However
    flush_tmregs_to_thread() does not check if TM feature is available on
    CPU before trying to access TM SPRs in order to copy live state to
    thread structures. flush_tmregs_to_thread() is indeed guarded by
    CONFIG_PPC_TRANSACTIONAL_MEM but it might be the case that kernel
    was compiled with CONFIG_PPC_TRANSACTIONAL_MEM enabled and ran on
    a CPU without TM feature available, thus rendering the execution
    of TM instructions that are treated by the CPU as illegal instructions.
    
    The fix is just to add proper checking in flush_tmregs_to_thread()
    if CPU has the TM feature before accessing any TM-specific resource,
    returning immediately if TM is no available on the CPU. Adding
    that checking in flush_tmregs_to_thread() instead of in places
    where it is called, like in vsr_get() and vsr_set(), is better because
    avoids the same problem cropping up elsewhere.
    
    Cc: stable@vger.kernel.org # v4.13+
    Fixes: cd63f3c ("powerpc/tm: Fix saving of TM SPRs in core dump")
    Signed-off-by: Gustavo Romero <gromero@linux.vnet.ibm.com>
    Reviewed-by: Cyril Bur <cyrilbur@gmail.com>
    Signed-off-by: Michael Ellerman <mpe@ellerman.id.au>

 arch/powerpc/kernel/ptrace.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-03-27
CVE: CVE-2018-1091
Break Date: 2017-07-28
Break Commit: cd63f3cf1d59b7ad8419eba1cac8f9126e79cc43
Break Tag: 4.13-rc4
Linus Fix Date: 2017-09-20
Linus Commit: c1fa0768a8713b135848f78fd43ffc208d8ded70
Linus Tag: 4.14-rc2
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2018-5703:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit c113187d38ff85dc302a1bb55864b203ebb2ba10
Author: Boris Pismenny <borisp@mellanox.com>
Date:   Tue Feb 27 14:18:39 2018 +0200

    tls: Use correct sk->sk_prot for IPV6
    
    The tls ulp overrides sk->prot with a new tls specific proto structs.
    The tls specific structs were previously based on the ipv4 specific
    tcp_prot sturct.
    As a result, attaching the tls ulp to an ipv6 tcp socket replaced
    some ipv6 callback with the ipv4 equivalents.
    
    This patch adds ipv6 tls proto structs and uses them when
    attached to ipv6 sockets.
    
    Fixes: 3c4d7559159b ('tls: kernel TLS support')
    Signed-off-by: Boris Pismenny <borisp@mellanox.com>
    Signed-off-by: Ilya Lesokhin <ilyal@mellanox.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

 net/tls/tls_main.c | 52 +++++++++++++++++++++++++++++++++++++---------------
 1 file changed, 37 insertions(+), 15 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-01-16
CVE: CVE-2018-5703
Break Date: 2017-06-15
Break Commit: 3c4d7559159bfe1e3b94df3a657b2cda3a34e218
Break Tag: 4.13-rc1
Linus Fix Date: 2018-02-27
Linus Commit: c113187d38ff85dc302a1bb55864b203ebb2ba10
Linus Tag: 4.16-rc5
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2018-7740:
*************

*** This is a new CVE ***
---
Description of fix for this vulnerability:
commit 63489f8e821144000e0bdca7e65a8d1cc23a7ee7
Author: Mike Kravetz <mike.kravetz@oracle.com>
Date:   Thu Mar 22 16:17:13 2018 -0700

    hugetlbfs: check for pgoff value overflow
    
    A vma with vm_pgoff large enough to overflow a loff_t type when
    converted to a byte offset can be passed via the remap_file_pages system
    call.  The hugetlbfs mmap routine uses the byte offset to calculate
    reservations and file size.
    
    A sequence such as:
    
      mmap(0x20a00000, 0x600000, 0, 0x66033, -1, 0);
      remap_file_pages(0x20a00000, 0x600000, 0, 0x20000000000000, 0);
    
    will result in the following when task exits/file closed,
    
      kernel BUG at mm/hugetlb.c:749!
      Call Trace:
        hugetlbfs_evict_inode+0x2f/0x40
        evict+0xcb/0x190
        __dentry_kill+0xcb/0x150
        __fput+0x164/0x1e0
        task_work_run+0x84/0xa0
        exit_to_usermode_loop+0x7d/0x80
        do_syscall_64+0x18b/0x190
        entry_SYSCALL_64_after_hwframe+0x3d/0xa2
    
    The overflowed pgoff value causes hugetlbfs to try to set up a mapping
    with a negative range (end < start) that leaves invalid state which
    causes the BUG.
    
    The previous overflow fix to this code was incomplete and did not take
    the remap_file_pages system call into account.
    
    [mike.kravetz@oracle.com: v3]
      Link: http://lkml.kernel.org/r/20180309002726.7248-1-mike.kravetz@oracle.com
    [akpm@linux-foundation.org: include mmdebug.h]
    [akpm@linux-foundation.org: fix -ve left shift count on sh]
    Link: http://lkml.kernel.org/r/20180308210502.15952-1-mike.kravetz@oracle.com
    Fixes: 045c7a3f53d9 ("hugetlbfs: fix offset overflow in hugetlbfs mmap")
    Signed-off-by: Mike Kravetz <mike.kravetz@oracle.com>
    Reported-by: Nic Losby <blurbdust@gmail.com>
    Acked-by: Michal Hocko <mhocko@suse.com>
    Cc: "Kirill A . Shutemov" <kirill.shutemov@linux.intel.com>
    Cc: Yisheng Xie <xieyisheng1@huawei.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

 fs/hugetlbfs/inode.c | 17 ++++++++++++++---
 mm/hugetlb.c         |  7 +++++++
 2 files changed, 21 insertions(+), 3 deletions(-)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-03-07
CVE: CVE-2018-7740
Break Date: 2017-04-13
Break Commit: 045c7a3f53d9403b62d396b6d051c4be5044cdb4
Break Tag: 4.11-rc7
Linus Fix Date: 2018-03-22
Linus Commit: 63489f8e821144000e0bdca7e65a8d1cc23a7ee7
Linus Tag: 4.16-rc7
Stable Date: -
Stable Commit: -
Stable Tag: -

CVE-2018-8822:
*************

*** This is a new CVE ***
This CVE has been resolved in 4.4.125.
Please pull this or a newer version of the kernel to resolve this security vulnerability.

---
Description of fix for this vulnerability:
commit 4c41aa24baa4ed338241d05494f2c595c885af8f
Author: Dan Carpenter <dan.carpenter@oracle.com>
Date:   Mon Mar 19 14:07:45 2018 +0300

    staging: ncpfs: memory corruption in ncp_read_kernel()
    
    If the server is malicious then *bytes_read could be larger than the
    size of the "target" buffer.  It would lead to memory corruption when we
    do the memcpy().
    
    Reported-by: Dr Silvio Cesare of InfoSect <Silvio Cesare <silvio.cesare@gmail.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

 drivers/staging/ncpfs/ncplib_kernel.c | 4 ++++
 1 file changed, 4 insertions(+)
---
The following fields have changed: Public Date,CVE,Break Date,Break Commit,Break Tag,Linus Fix Date,Linus Commit,Linus Tag,Stable Date,Stable Commit,Stable Tag
Public Date: 2018-03-20
CVE: CVE-2018-8822
Break Date: -
Break Commit: -
Break Tag: -
Linus Fix Date: 2018-03-19
Linus Commit: 4c41aa24baa4ed338241d05494f2c595c885af8f
Linus Tag: 4.16-rc7
Stable Date: 2018-03-28
Stable Commit: badf74b65fc27112f5fee871c7ade9199c74b2e1
Stable Tag: 4.4.125
